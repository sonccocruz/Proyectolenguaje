"use strict";define("Analytics/Boards/BoardsQueries",["require","exports","Analytics/Common/AnalyticsCacheableQueryBase","Analytics/Common/Utilities/QueryUtilities","Analytics/Common/Utilities/PublicProjectsQueryHelper","VSS/Platform/Feature"],function(e,t,r,o,a,i){var s,n,c,u;t.Resources={},t.Resources.Error_FailedToFindAVisibleBoard="Failed to find any visible boards. Please visit/configure boards and try again.",function(e){t.AggregationFieldsQuery={};class a extends r.AnalyticsCacheableQueryBase{static generateQueryOptions(e){return{entityType:"WorkItemTypeFields",oDataVersion:o.latestODataVersion,project:e,$filter:"(FieldType eq 'Integer' or FieldType eq 'Double') and (not startswith(FieldReferenceName,'System.'))"}}constructor(e){super(r.CommonFeatureCommandName,a.generateQueryOptions(e))}getQueryName(){return"AggregationWorkItemTypeFieldsQuery"}}function i(e){return["Microsoft.VSTS.Common.StackRank","Microsoft.VSTS.Common.Priority","Microsoft.VSTS.Common.BacklogPriority","Microsoft.VSTS.Common.TimeCriticality"].findIndex(t=>t===e)>=0}t.AggregationFieldsQuery.AggregationFieldsQuery=a,t.AggregationFieldsQuery.getDistinctFieldsOfTypes=function(e,t){const r=t.filter(t=>e.some(e=>t.WorkItemType===e&&!i(t.FieldReferenceName)));let o={},a=[];for(let e of r)void 0===o[e.FieldReferenceName]&&a.push({FieldName:e.FieldName,FieldReferenceName:e.FieldReferenceName,FieldType:e.FieldType}),o[e.FieldReferenceName]=0;return a},t.AggregationFieldsQuery.isRecognizedNonAggregationField=i}(),function(e){t.BacklogsQuery={};class a extends r.AnalyticsCacheableQueryBase{static generateQueryOptions(e,t){if(!t||0==t.length)throw new Error("No team Id's were supplied to Backlogs query.");let r="";for(let e=0;e<t.length;e++)e>0&&(r+=" or "),r+=`TeamSK eq ${t[e]}`;return{project:e,entityType:"BoardLocations",oDataVersion:o.latestODataVersion,$apply:`filter(${r})/groupby((BoardName,BoardLevel,BoardCategoryReferenceName,IsBoardVisible))`,$orderby:"BoardLevel desc"}}constructor(e,t){super(r.CommonFeatureCommandName,a.generateQueryOptions(e,t))}getQueryName(){return"BacklogQuery"}}t.BacklogsQuery.BacklogsQuery=a}(),s=t.DataContracts={},(u=t.DataContracts.AggregationMode||(t.DataContracts.AggregationMode={}))[u.Count=0]="Count",u[u.Sum=1]="Sum",(c=t.DataContracts.WitFieldType||(t.DataContracts.WitFieldType={}))[c.Internal=0]="Internal",c[c.String=1]="String",c[c.Integer=2]="Integer",c[c.DateTime=3]="DateTime",c[c.PlainText=5]="PlainText",c[c.Html=7]="Html",c[c.TreePath=8]="TreePath",c[c.History=9]="History",c[c.Double=10]="Double",c[c.Guid=11]="Guid",c[c.Boolean=12]="Boolean",c[c.PicklistInteger=14]="PicklistInteger",c[c.PicklistString=15]="PicklistString",(n=t.DataContracts.WiqlOperators||(t.DataContracts.WiqlOperators={})).NotSpace="NOT",n.OperatorAnd="AND",n.OperatorOr="OR",n.OperatorContains="CONTAINS",n.OperatorNotContains="NOT CONTAINS",n.OperatorContainsWords="CONTAINS WORDS",n.OperatorNotContainsWords="NOT CONTAINS WORDS",n.OperatorIn="IN",n.OperatorNotIn="NOT IN",n.OperatorEver="EVER",n.OperatorNotEver="NOT EVER",n.OperatorUnder="UNDER",n.OperatorNotUnder="NOT UNDER",n.OperatorInGroup="IN GROUP",n.OperatorNotInGroup="NOT IN GROUP",n.OperatorEqualTo="=",n.OperatorNotEqualTo="<>",n.OperatorIsEmpty="IS EMPTY",n.OperatorIsNotEmpty="IS NOT EMPTY",n.OperatorGreaterThan=">",n.OperatorLessThan="<",n.OperatorGreaterThanOrEqualTo=">=",n.OperatorLessThanOrEqualTo="<=",n.MacroStart="@",n.MacroToday="@today",n.MacroMe="@me",n.MacroProject="@project",n.MacroCurrentIteration="@currentIteration",n.MacroTeamAreas="@teamAreas",n.MacroFollows="@follows",n.MacroRecentMentions="@recentMentions",n.MacroMyRecentActivity="@myRecentActivity",n.MacroRecentProjectActivity="@recentProjectActivity",n.MacroStartOfYear="@startOfYear",n.MacroStartOfMonth="@startOfMonth",n.MacroStartOfWeek="@startOfWeek",n.MacroStartOfDay="@startOfDay",function(e){t.IterationsQuery={};class a extends r.AnalyticsCacheableQueryBase{constructor(e,t,o,i,s,n){super(r.CommonFeatureCommandName,a.generateQueryOptions(e,t,o,i,s)),this.queryName=n}static generateQueryOptions(e,t,r,a,i){let s=void 0,n=void 0;let c=void 0;a&&(c=null!=r?"StartDate lt now()":"StartDate ne null");const u="IsEnded,StartDate desc,EndDate desc,IterationName";r&&(s=`${r}`);const l=i;return(n=t?`Teams/any(t:t/TeamSK eq ${t})`+" and "+c:c)||e?{entityType:"Iterations",oDataVersion:o.latestODataVersion,project:e,$filter:n,$orderby:u,$top:s,$select:l}:{entityType:"Iterations",oDataVersion:o.latestODataVersion,$orderby:u,$select:l}}static onTeam(e,t,r){const o=a.defaultColumns;return new a(e,t,r,!0,o)}static onProject(e){const t=a.defaultColumns;return new a(e,void 0,void 0,!0,t)}static allIterationsOnProject(e){const t=a.unrestrictedColumns;return new a(e,void 0,void 0,!1,t)}getQueryName(){return this.queryName||"IterationsQuery"}interpretQueryResults(e){return s(e)}}t.IterationsQuery.IterationsQuery=a,a.defaultColumns="IterationSK, IterationName, StartDate, EndDate, IsEnded, IterationPath",a.unrestrictedColumns="IterationSK,IterationName,StartDate,EndDate,IterationPath,Depth,ProjectSK,Number,Depth";class i extends r.AnalyticsCacheableQueryBase{static onIterationPath(e,t){const r=`IterationPath eq '${o.QueryUtilities.escapeString(t)}'`,s=a.defaultColumns,n={entityType:"Iterations",oDataVersion:o.latestODataVersion,project:e,$filter:r,$select:s};return new i(n)}constructor(e){super(r.CommonFeatureCommandName,e)}getQueryName(){return"IterationQuery"}interpretQueryResults(e){return s(e)}}function s(e){return e.value.map(e=>({IterationSK:e.IterationSK,IterationName:e.IterationName,IterationPath:e.IterationPath,StartDateTimeOffset:e.StartDate,EndDateTimeOffset:e.EndDate,IsEnded:e.IsEnded,ProjectSK:e.ProjectSK,Number:e.Number,Depth:e.Depth})).reverse()}t.IterationsQuery.IterationQuery=i}(),function(e){t.ProcessesQuery={};class s extends r.AnalyticsCacheableQueryBase{constructor(e,t){super(r.CommonFeatureCommandName,e),this.queryName=t}static generateQueryOptions(e,t,r){const s=`filter(${null!=r?`TeamSK eq ${r} and `:""} ProjectSK eq ${t})`,n=(0,i.isFeatureFlagEnabled)(e,"WebAccess.Process.WorkItemTypeIsDeletedOnProcess",!1)?", IsDeleted":"";return(0,a.forceProjectScoping)(e,[t],{entityType:"Processes",oDataVersion:o.latestODataVersion,$apply:`${s}/groupby((BacklogCategoryReferenceName, WorkItemType, IsBugType, BacklogName${n}))`})}static onProject(e,t){return new s(s.generateQueryOptions(e,t))}static onTeam(e,t,r){if(null==r||0===r.trim().length)throw new Error("Team ID must be provided to use this method. Use onProject instead if querying for processes at the project level.");return new s(s.generateQueryOptions(e,t,r))}getQueryName(){return this.queryName||"ProcessesQuery"}}t.ProcessesQuery.ProcessesQuery=s}(),function(e){t.TeamsQuery={};class a extends r.AnalyticsCacheableQueryBase{static generateQueryOptions(e){return{entityType:"Teams",oDataVersion:o.latestODataVersion,project:e,$orderby:"TeamName",$select:"TeamId,TeamName,ProjectSK"}}static onProject(e,t){return new a(a.generateQueryOptions(t))}constructor(e){super(r.CommonFeatureCommandName,e)}getQueryName(){return"TeamsQuery"}}t.TeamsQuery.TeamsQuery=a}(),function(e){t.WitFieldUtilities={};class r{static replaceUnsupportedCharacters(e){const t=[];for(let r=0;r<e.length;++r){const o=e[r];if("."===o)t.push("_");else if(/[^\w\s\.]/.test(o)){let e=o.charCodeAt(0).toString(16).toUpperCase();e=(e="0000"+e).slice(-4),t.push(`__${e}`)}else t.push(o)}return t.join("")}static tagOperatorToODataClause(e){switch(e.toLowerCase().trim()){case"Contains".toLowerCase():return"eq";case"Does not contain".toLowerCase():case"Not contains".toLowerCase():return"ne"}return""}static getTagsClause(e){const t=[],o=[];for(const a of e)a.fieldName===r.tagsReferenceName&&("eq"===r.tagOperatorToODataClause(a.queryOperation)?t.push(`Tags/any(t:t/TagName eq '${r.escapeString(a.queryValue)}')`):o.push(`t/TagName ne '${r.escapeString(a.queryValue)}'`));let a=t.join(" and ");return o.length>0&&(""!=a&&(a+=" and "),a+=`Tags/all(t:${o.join(" and ")})`),a}static operatorToODataOperator(e){switch(e.trim()){case">":return"gt";case">=":return"ge";case"<":return"lt";case"<=":return"le";case"=":return"eq";case"<>":return"ne"}return""}static getFieldODataPropertyName(e){const t=r.workItemPrimitiveCommonPropertiesMapping[e];return null!=t&&(e=t),/^(\d+)/.test(e)&&(e=`_${e}`),r.replaceUnsupportedCharacters(e)}static escapeString(e){return e.split("'").join("''")}static getFiltersClause(e,t){const o=e.filter(e=>e.fieldName!==r.tagsReferenceName).map(e=>{const o=t.filter(t=>t.FieldReferenceName==e.fieldName);if(o.length>0){const t=o[0];if("Identity"==t.FieldType)return null;const a=t.AnalyticsFilterName,i=t.GetAnalyticsQueryValueFunc(e),n=r.escapeString(i);if(t.FieldType===s.WitFieldType[s.WitFieldType.TreePath]&&e.queryOperation===s.WiqlOperators.OperatorUnder)return`(${a} eq '${n}' or startswith(${a},'${n}\\'))`;if(t.FieldType===s.WitFieldType[s.WitFieldType.TreePath]&&e.queryOperation===s.WiqlOperators.OperatorNotUnder)return`((${a} ne '${n}' and not startswith(${a},'${n}\\')) or ${a} eq null)`;{const o=t.UseQuotes?"'":"",i=r.operatorToODataOperator(e.queryOperation),s=`${a} ${i} ${o}${n}${o}`;return n?"ne"===i?`(${s} or ${a} eq null)`:s:`${a} ${i} null`}}return console.warn("Query did not recognize field: "+e.fieldName),null}).filter(e=>!!e).join(" and "),a=r.getTagsClause(e);return o&&a?[o,a].join(" and "):o||(a||"")}}t.WitFieldUtilities.WitFieldUtilities=r,r.workItemPrimitiveCommonPropertiesMapping={"System.Id":"WorkItemId","System.Rev":"Revision","System.Watermark":"Watermark","System.Title":"Title","System.WorkItemType":"WorkItemType","System.ChangedDate":"ChangedDate","System.CreatedDate":"CreatedDate","System.State":"State","System.Reason":"Reason","System.IsDeleted":"IsDeleted","System.Tags":"TagNames","Microsoft.VSTS.Common.StateChangeDate":"StateChangeDate","System.StateChangeDate":"StateChangeDate","Microsoft.VSTS.Build.FoundIn":"FoundIn","Microsoft.VSTS.Build.IntegrationBuild":"IntegrationBuild","Microsoft.VSTS.Common.Activity":"Activity","Microsoft.VSTS.Common.ActivatedDate":"ActivatedDate","Microsoft.VSTS.Common.BacklogPriority":"BacklogPriority","Microsoft.VSTS.Common.BusinessValue":"BusinessValue","Microsoft.VSTS.Common.ClosedDate":"ClosedDate","Microsoft.VSTS.Common.Discipline":"Discipline","Microsoft.VSTS.Common.Issue":"Issue","Microsoft.VSTS.Common.Priority":"Priority","Microsoft.VSTS.Common.Rating":"Rating","Microsoft.VSTS.Common.ResolvedDate":"ResolvedDate","Microsoft.VSTS.Common.ResolvedReason":"ResolvedReason","Microsoft.VSTS.Common.Risk":"Risk","Microsoft.VSTS.Common.Severity":"Severity","Microsoft.VSTS.Common.StackRank":"StackRank","Microsoft.VSTS.Common.TimeCriticality":"TimeCriticality","Microsoft.VSTS.Common.Triage":"Triage","Microsoft.VSTS.Common.ValueArea":"ValueArea","Microsoft.VSTS.Scheduling.CompletedWork":"CompletedWork","Microsoft.VSTS.Scheduling.DueDate":"DueDate","Microsoft.VSTS.Scheduling.Effort":"Effort","Microsoft.VSTS.Scheduling.FinishDate":"FinishDate","Microsoft.VSTS.Scheduling.OriginalEstimate":"OriginalEstimate","Microsoft.VSTS.Scheduling.RemainingWork":"RemainingWork","Microsoft.VSTS.Scheduling.Size":"Size","Microsoft.VSTS.Scheduling.StartDate":"StartDate","Microsoft.VSTS.Scheduling.StoryPoints":"StoryPoints","Microsoft.VSTS.Scheduling.TargetDate":"TargetDate","Microsoft.VSTS.CMMI.Blocked":"Blocked","Microsoft.VSTS.CMMI.Committed":"Committed","Microsoft.VSTS.CMMI.Escalate":"Escalate","Microsoft.VSTS.CMMI.FoundInEnvironment":"FoundInEnvironment","Microsoft.VSTS.CMMI.HowFound":"HowFound","Microsoft.VSTS.CMMI.Probability":"Probability","Microsoft.VSTS.CMMI.RequirementType":"RequirementType","Microsoft.VSTS.CMMI.RequiresReview":"RequiresReview","Microsoft.VSTS.CMMI.RequiresTest":"RequiresTest","Microsoft.VSTS.CMMI.RootCause":"RootCause","Microsoft.VSTS.CMMI.SubjectMatterExpert1":"SubjectMatterExpert1","Microsoft.VSTS.CMMI.SubjectMatterExpert2":"SubjectMatterExpert2","Microsoft.VSTS.CMMI.SubjectMatterExpert3":"SubjectMatterExpert3","Microsoft.VSTS.CMMI.TargetResolveDate":"TargetResolveDate","Microsoft.VSTS.CMMI.TaskType":"TaskType","Microsoft.VSTS.CMMI.UserAcceptanceTest":"UserAcceptanceTest","Microsoft.VSTS.TCM.AutomatedTestId":"AutomatedTestId","Microsoft.VSTS.TCM.AutomatedTestName":"AutomatedTestName","Microsoft.VSTS.TCM.AutomatedTestStorage":"AutomatedTestStorage","Microsoft.VSTS.TCM.AutomatedTestType":"AutomatedTestType","Microsoft.VSTS.TCM.AutomationStatus":"AutomationStatus"},r.tagsReferenceName="System.Tags"}()},["Resources","AggregationFieldsQuery","BacklogsQuery","DataContracts","IterationsQuery","ProcessesQuery","TeamsQuery","WitFieldUtilities"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-analytics.analytics-boards-queries"}}));