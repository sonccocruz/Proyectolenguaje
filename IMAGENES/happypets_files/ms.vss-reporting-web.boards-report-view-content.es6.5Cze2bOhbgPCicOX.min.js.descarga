"use strict";define("Reporting/BoardsReportView",["require","exports","VSS/Core/Util/String","Analytics/Boards/CumulativeFlowDiagramQueries/BoardColumnsQuery","Analytics/Boards/CumulativeFlowDiagramQueries/CumulativeFlowHistoryQuery","Analytics/Shared/Visuals/CardMetricsVisual/CardMetricsVisual","react","Reporting/BoardsCommon/BoardsRoutingHelper","Reporting/BoardsCommon/ReportTelemetry","Reporting/CFDReport/CfdReport","Reporting/CFDReport/CfdReportUserSettings","Reporting/CFDReport/Pickers/BoardsQuery","Reporting/CFDReport/Resources","VSS/Platform/Layout","VSS/Platform/Trace","WidgetCommon/DateUtils/DateUtils","Widgets/CumulativeFlowDiagram/CfdAggregationHelper","Widgets/CumulativeFlowDiagram/QueryUtilities","Analytics/Boards/BoardsQueries/DataContracts","Analytics/Boards/BoardsQueries/IterationsQuery","Analytics/Boards/BoardsQueries/ProcessesQuery","Analytics/Boards/VelocityQueries/MetastateByIterationsQuery","Analytics/Common/Utilities/AnalyticsExceptionUtilities","Reporting/VelocityReport/VelocityReportUserSettings","VSS/Platform/FPS","VSS/Platform/Location","Widgets/VelocityWidget/VelocityWidgetComponents/VelocityDataHelper","Analytics/Queries/PingServiceQuery","Reporting/BoardsCommon/AccessDeniedMessage","Reporting/BoardsCommon/ReportQueryHelper","VSS/Platform/Components/Layout","VSSUI/Header"],function(e,t,r,a,o,s,i,n,c,l,p,d,u,m,g,y,h,C,R,S,v,x,f,I,D,M,V,B,T,w,P,b){var N,E,F,A;N=t.Resources={},t.Resources.ReportTitle="Analytics",t.Resources.VelocityReportName="Velocity",t.Resources.CumulativeFlowDiagramReportName="Cumulative Flow Diagram",t.Resources.LeadTimeMetricLabel="Average Lead Time",t.Resources.WorkInProgressMetricLabel="Average work in progress",t.Resources.LeadTimeNotCalculated="The lead time metric could not be calculated with the current data set.",t.Resources.VelocityMetricLabel="Average Velocity",t.Resources.VelocityCardSetIterationDatesMessage="Iteration dates must be set to use this report. Click to set iteration dates",t.Resources.AxFaultInMessage="Preparing your data. Try refreshing the page to see if we are done.",t.Resources.VelocityUnknownErrorMessageText="An unknown error occurred, could not calculate average velocity metric.",t.Resources.Error_PlaceholderBoardUnsupported_Format="It looks like no one has ever visited the {0} board. Please visit the board first, then try again.",t.BoardsReportSelectorProps={},function(e){E=t.PlaceholderBoardUnsupportedError={};t.PlaceholderBoardUnsupportedError.PlaceholderBoardUnsupportedError=class extends Error{constructor(e,t,a){const o=new.target.prototype;super((0,r.format)(N.Error_PlaceholderBoardUnsupported_Format,a?a.BoardName:"")),this.projectId=e,this.team=t,this.board=a,this.__proto__=o}}}(),function(e){F=t.CfdReportCard={};class R extends m.VssComponent{constructor(e,t){super(e,t),this.queryService=this.context.pageContext.getService("IDashboardsCacheableQueryService"),this.state={averageWip:void 0,dataReady:!1}}async componentDidMount(){this.loadCfdMetricsData()}async componentDidUpdate(e){JSON.stringify(e)!==JSON.stringify(this.props)&&this.loadCfdMetricsData()}render(){let e=this.getCardMetric(N.WorkInProgressMetricLabel,this.state.averageWip),t=void 0,a=this.props.onCardClick;return this.state.unmaterializedBoard?(t=(0,r.format)(N.Error_PlaceholderBoardUnsupported_Format,this.props.categoryName),e={label:"",value:""},a=(0,n.getNavigateToBoardHandler)(this.context.pageContext)):this.state.errorMessage?t=this.state.errorMessage:void 0===e&&this.state.dataReady&&(e={label:"",value:""}),i.createElement(s.CardMetricsVisual,{title:N.CumulativeFlowDiagramReportName,dataValidationPromises:[],primaryMetric:void 0,secondaryMetric:e,secondaryMetricSize:{label:s.MetricSize.Medium,value:s.MetricSize.XLarge},insight:"",onCardClick:a,errorText:t})}async runQuery(e){return this.queryService.getCacheableQueryResult(e)}async loadCfdMetricsData(){this.metricsPromise&&this.metricsPromise.cancel();try{this.metricsPromise=this.trackPromise(this.getCfdMetrics());const e=await this.metricsPromise.promise;this.setState(e)}catch(e){if(e.isCanceled)return;(0,g.traceException)(this.context.pageContext,c.telemetryAreaName,R.ReportTelemetryFeatureName,e);let t=void 0;e instanceof E.PlaceholderBoardUnsupportedError&&(t=!0),this.setState({dataReady:!0,errorMessage:e.message,unmaterializedBoard:t})}}getCardMetric(e,t){let r=void 0;return void 0!==t&&(r={label:e,value:t.toString()}),r}async getCfdMetrics(){const e=await(0,d.getBoard)(this.context.pageContext,this.props.projectId,this.props.teamId,this.props.categoryReferenceName);if(null==e||null==e.BoardId)throw(0,c.publishEmptyReportTelemetry)(this.context.pageContext,R.ReportTelemetryFeatureName,u.UnmaterializedBoard),new E.PlaceholderBoardUnsupportedError(this.props.projectId,{id:this.props.teamId,name:this.props.teamName},e);const t=new a.BoardColumnsQuery(C.reportCommand,this.props.projectId,e.BoardId),[r,s]=await Promise.all([p.CFDReportUserSettings.load(this.context.pageContext,this.props.teamId,this.props.categoryReferenceName),this.runQuery(t)]),i=r.rollingDuration||l.CFDReport.defaultRollingDuration,n=await this.calculateStartDate(i),m=new o.CumulativeFlowHistoryQuery(C.reportCommand,{project:this.props.projectId,boardId:e.BoardId,boardLane:r.boardLane,startDate:n}),g=await this.runQuery(m);let y=r.boardColumnIds;return void 0===y&&(y=s.boardColumns.map(e=>e.ColumnId)),{averageWip:(0,h.getAverageWip)(s.boardColumns,g,y),dataReady:!0}}async calculateStartDate(e){const t=await(0,y.fetchTodayInAccountTimeZone)(this.context.pageContext);return(0,y.addDays)((0,y.parseIsoDateStringInLocalTime)(t),-1*e).toISOString().substr(0,10)}}t.CfdReportCard.CfdReportCard=R,R.ReportTelemetryFeatureName="CfdReportCard"}(),function(e){var r;A=t.VelocityReportCard={},function(e){e[e.SetIterationDates=0]="SetIterationDates",e[e.AxFaultIn=1]="AxFaultIn",e[e.DataError=2]="DataError",e[e.Success=3]="Success"}(r||(r={}));class a extends m.VssComponent{constructor(e,t){super(e,t),this.navigateToSetIterationsPage=(()=>{const e=(0,M.routeUrl)(this.context.pageContext,"ms.vss-admin-web.project-admin-hub-route",{project:this.props.projectId,adminPivot:"work"});(0,D.FastPageSwitch)(this.context.pageContext,e,!0)}),this.queryService=this.context.pageContext.getService("IDashboardsCacheableQueryService"),this.state={velocityValue:void 0}}async componentDidMount(){this.loadVelocityMetricsData()}async componentDidUpdate(e){JSON.stringify(e)!==JSON.stringify(this.props)&&this.loadVelocityMetricsData()}render(){const e=this.getCardMetricsProps();return i.createElement(s.CardMetricsVisual,Object.assign({},e))}async loadVelocityMetricsData(){this.velocityDataPromise&&this.velocityDataPromise.cancel();try{this.velocityDataPromise=this.trackPromise(this.getAverageVelocity());const e=await this.velocityDataPromise.promise;this.setState({MessageType:e.messageType,velocityValue:e.value,errorMessage:e.message})}catch(e){if(e.isCanceled)return;(0,g.traceException)(this.context.pageContext,c.telemetryAreaName,a.ReportTelemetryFeatureName,e),this.setState({errorMessage:e.message})}}getCardMetricsProps(){let e=void 0,t="",a=this.props.onCardClick;if(void 0!==this.state.velocityValue&&(e={label:N.VelocityMetricLabel,value:this.state.velocityValue.toLocaleString()}),void 0!==this.state.MessageType&&this.state.MessageType!==r.Success)switch(this.state.MessageType){case r.SetIterationDates:t=N.VelocityCardSetIterationDatesMessage,a=this.navigateToSetIterationsPage;break;case r.AxFaultIn:t=N.AxFaultInMessage;break;case r.DataError:t=this.state.errorMessage||N.VelocityUnknownErrorMessageText}return{title:N.VelocityReportName,dataValidationPromises:[],primaryMetric:void 0,secondaryMetric:e,secondaryMetricSize:{label:s.MetricSize.Medium,value:s.MetricSize.XLarge},insight:"",onCardClick:a,errorText:t}}async getAverageVelocity(){const e=await I.VelocityReportUserSettings.load(this.context.pageContext,this.props.teamId,this.props.categoryReferenceName);try{const[t,o]=await Promise.all([this.getIterations(this.props.projectId,this.props.teamId,e.numberOfIterations||6),this.getWorkItemTypes(this.props.projectId,this.props.teamId,this.props.categoryReferenceName)]);if(0===t.length)return(0,c.publishEmptyReportTelemetry)(this.context.pageContext,a.ReportTelemetryFeatureName,N.VelocityCardSetIterationDatesMessage),{messageType:r.SetIterationDates,message:N.VelocityCardSetIterationDatesMessage};const s=[];t.filter(e=>e.IterationSK).map(e=>{s.push(e.IterationSK)});const i=e.aggregationSettings?e.aggregationSettings:{identifier:R.AggregationMode.Count,settings:""},n=await this.getMetastate(s,this.props.projectId,this.props.teamId,i,o);return{messageType:r.Success,value:V.VelocityDataHelper.getAverageVelocity(n,t)}}catch(e){let t=r.DataError;const o=(0,f.extractODataError)(e);return(0,f.recognizeAnalyticsException)(e)===f.AnalyticsExceptionType.DataNotReady?(t=r.AxFaultIn,(0,c.publishEmptyReportTelemetry)(this.context.pageContext,a.ReportTelemetryFeatureName,o)):(0,g.traceException)(this.context.pageContext,c.telemetryAreaName,a.ReportTelemetryFeatureName,e),{messageType:t,message:o}}}async getWorkItemTypes(e,t,r){const a=v.ProcessesQuery.onTeam(this.context.pageContext,e,t);return(await this.runQuery(a)).map(e=>e.BacklogCategoryReferenceName===r?e.WorkItemType:"").filter(e=>""!=e)}getIterations(e,t,r){const a=S.IterationsQuery.onTeam(e,t,r);return this.runQuery(a)}getMetastate(e,t,r,a,o){const s=new x.MetastateByIterationsQuery("VelocityReport",t,r,e,a,o);return this.runQuery(s)}async runQuery(e){return this.queryService.getCacheableQueryResult(e)}}t.VelocityReportCard.VelocityReportCard=a,a.ReportTelemetryFeatureName="VelocityReportCard"}(),function(e){t.BoardsReportSelector={};class r extends m.VssComponent{constructor(e,t){super(e,t),this.onClickVelocity=(()=>{this.navigateLegacy("velocity")}),this.onClickCfd=(()=>{this.navigateLegacy("cfd")}),this.navigateLegacy=(e=>{const t=(0,n.getBoardsReportUrl)(this.context.pageContext,this.props.categoryName,e);(0,D.FastPageSwitch)(this.context.pageContext,t,!0)}),this.state={}}async componentDidMount(){(0,w.resetQueryCache)(this.context.pageContext),this.intitializeBoardsReportSelectorState()}async componentDidUpdate(e){JSON.stringify(this.props)!=JSON.stringify(e)&&(this.props.lastRefresh!=e.lastRefresh&&(0,w.resetQueryCache)(this.context.pageContext),this.intitializeBoardsReportSelectorState())}render(){let e,t="";return this.state.isReady||(t=" hidden"),this.state.showAccessDeniedState&&(e=i.createElement(T.AccessDeniedMessage,null),t=" hidden"),i.createElement(i.Fragment,null,e,i.createElement("div",{className:`backlogs-report-selector bolt-page-grey ${t}`},i.createElement(b.Header,{titleSize:1,title:N.ReportTitle}),i.createElement("div",{className:"flex-row report-cards-view"},i.createElement(F.CfdReportCard,Object.assign({},this.props,{onCardClick:this.onClickCfd})),i.createElement(A.VelocityReportCard,Object.assign({},this.props,{onCardClick:this.onClickVelocity})))))}async intitializeBoardsReportSelectorState(){try{await new B.default("BoardsReportSelector",this.props.projectId).runQuery(this.context.pageContext),this.setState({isReady:!0},this.props.onLoadCompleted)}catch(e){const t=-1!==e.message.indexOf("403");t?(0,c.publishEmptyReportTelemetry)(this.context.pageContext,r.ReportTelemetryFeatureName,e.message):(0,g.traceException)(this.context.pageContext,c.telemetryAreaName,r.ReportTelemetryFeatureName,e),this.setState({isReady:!0,showAccessDeniedState:t},this.props.onLoadCompleted)}finally{this.props.onLoadCompleted&&this.props.onLoadCompleted()}}}t.BoardsReportSelector.BoardsReportSelector=r,r.ReportTelemetryFeatureName="BoardsReportSelector",m.VssComponent.register("BoardsReportSelector",r),m.VssComponent.register("BoardsReportSelectorPreloader",P.NoOpComponent)}()},["Resources","BoardsReportSelectorProps","PlaceholderBoardUnsupportedError","CfdReportCard","VelocityReportCard","BoardsReportSelector"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-reporting-web.boards-report-view-content"}}));