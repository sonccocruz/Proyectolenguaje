"use strict";define("VC/Common",["require","exports","VSS/Core/Observable","VSS/Platform/Context","VSS/Platform/RestClientBase","VSS/Platform/Util/Serialization","VSS/Platform/Feature","VSS/Platform/Location","Favorites/Picker/ArtifactPickerProvider","VSS/Platform/FPS","VSS/Core/Util/String","VSSUI/Utilities/Date","react","VSSUI/Util","VSS/Platform/Layout","VSSUI/PickList","VSS/Features/PlatformUI/ContributedMenu","VSS/Legacy/Legacy","VSS/Features/Frame/CommandBar","VSSUI/Observer","VSS/Core/Util/Object","VSSUI/Spinner"],function(e,t,r,s,o,i,a,n,p,c,u,l,d,m,h,g,y,R,I,v,f,q){var T,b,V,C,w,P,j,S,_,x,k,D,N,F;T=t.Resources={},t.Resources.RepositoryDropdown_AriaLabel="{0} Repository",t.Resources.VersionDropdown_PivotBranches="Branches",t.Resources.VersionDropdown_PivotTags="Tags",t.Resources.VersionDropdown_PivotCommits="Commits",t.Resources.VersionDropdown_MineBranches="Mine",t.Resources.VersionDropdown_AllBranches="All",t.Resources.VersionDropdown_TagsNoItemsText="No tags in this repository",t.Resources.VersionDropdown_BranchesSearchTextPlaceholder="Filter branches",t.Resources.VersionDropdown_TagsSearchTextPlaceholder="Filter tags",t.Resources.VersionDropdown_CommitsSearchTextPlaceholder="Search commits",t.Resources.VersionDropdown_BranchesSearchNoResultsText="No branches matched '{0}'",t.Resources.VersionDropdown_TagsSearchNoResultsText="No tags matched '{0}'",t.Resources.VersionDropdown_CommitsSearchNoResultsText="No commits matched '{0}'",t.Resources.VersionDropdown_CommitsSearchMinimumCharactersError="Enter first 4 characters of a commit ID",t.Resources.VersionDropdown_CommitsSearchWrongCharactersError="Commit IDs must be hex digits (0-9 and a-f)",t.Resources.VersionDropdown_NewBranch="New branch",t.Resources.VersionDropdown_ClearSelection="Clear selection",t.Resources.VersionDropdown_DefaultBadge="Default",t.Resources.VersionDropdown_BranchAriaLabel="{0} Branch",t.Resources.VersionDropdown_TagAriaLabel="{0} Tag",t.Resources.VersionDropdown_CommitAriaLabel="{0} Commit",t.Resources.ManageRepositories="Manage repositories",t.Resources.SearchRepositoriesWatermark="Filter repositories",t.Resources.ImportRepository="Import repository",t.Resources.NewRepository="New repository",t.Resources.NewPullRequest="New pull request",b=t.ContractsConstants={},(N=t.ContractsConstants.GitConstants||(t.ContractsConstants.GitConstants={})).GitSecurityNamespaceId="2e9eb7ed-3c0a-47d4-87c1-0ffdd275fd87",N.SecurableRoot="repoV2/",N.GitToolName="Git",t.ContractsConstants.VersionControlArea="VersionControl",function(e){t.ContractsEnumToString={},t.ContractsEnumToString.pullRequestStatusToString=function(e){switch(e){case 2:return"Abandoned";case 4:return"All";case 3:return"Completed";default:return"Active"}}}(),function(e){t.FluxAction={};class r{constructor(){this._listeners=[]}invoke(e){if(r.s_executing)throw new Error("Cannot invoke an action from inside another action.");r.s_executing=!0;try{this._listeners.forEach(t=>{t(e)})}finally{r.s_executing=!1}}addListener(e,t){let r=t?e.bind(t):e;return this._listeners.push(r),r}removeListener(e){let t=this._listeners.indexOf(e);t>=0&&this._listeners.splice(t,1)}}t.FluxAction.Action=r,r.s_executing=!1}(),function(e){t.FluxStore={};t.FluxStore.Store=class{constructor(){this.observable=new r.Observable}subscribe(e){this.observable.subscribe(e,void 0)}unsubscribe(e){this.observable.unsubscribe(e,void 0)}_emitChanged(){this.observable.notify(void 0,"emitChanged")}}}(),function(e){t[e]={};t[e].GitClientName="IGitRestClient",t[e].getGitClient=function(r,s){return r.getRestClient(t[e].GitClientName,s)},s.RestClients.add(t[e].GitClientName,{factory:class extends o.RestClientBase{constructor(e){super(e)}async createAnnotatedTag(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/annotatedTags/{objectId}",routeValues:{project:t,repositoryId:r},body:e})}async getAnnotatedTag(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/annotatedTags/{objectId}",routeValues:{project:e,repositoryId:t,objectId:r}})}async getBlob(e,t,r,s,o,i){const a={download:s,fileName:o,resolveLfs:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Blobs/{sha1}",routeValues:{project:r,repositoryId:e,sha1:t},queryParams:a})}async getBlobContent(e,t,r,s,o,i){const a={download:s,fileName:o,resolveLfs:i};return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"application/octet-stream",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Blobs/{sha1}",routeValues:{project:r,repositoryId:e,sha1:t},queryParams:a})}async getBlobsZip(e,t,r,s){const o={filename:s};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Blobs/{sha1}",routeValues:{project:r,repositoryId:t},queryParams:o,body:e})}async getBlobZip(e,t,r,s,o,i){const a={download:s,fileName:o,resolveLfs:i};return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Blobs/{sha1}",routeValues:{project:r,repositoryId:e,sha1:t},queryParams:a})}async getBranch(e,t,r,s){const o={name:t,baseVersionDescriptor:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/stats/branches",routeValues:{project:r,repositoryId:e},queryParams:o})}async getBranches(e,t,r){const s={baseVersionDescriptor:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/stats/branches",routeValues:{project:t,repositoryId:e},queryParams:s})}async getBranchStatsBatch(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/stats/branches",routeValues:{project:r,repositoryId:t},body:e})}async getChanges(e,t,r,s,o){const i={top:s,skip:o};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/Changes",routeValues:{project:r,commitId:e,repositoryId:t},queryParams:i})}async getCherryPickRelationships(e,t,r,s){const o={includeLinks:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/cherryPickRelationships/{commitId}",routeValues:{project:r,repositoryNameOrId:e,commitId:t},queryParams:o})}async createCherryPick(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/cherryPicks/{cherryPickId}",routeValues:{project:t,repositoryId:r},body:e})}async getCherryPick(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/cherryPicks/{cherryPickId}",routeValues:{project:e,cherryPickId:t,repositoryId:r}})}async getCherryPickForRefName(e,t,r){const s={refName:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/cherryPicks/{cherryPickId}",routeValues:{project:e,repositoryId:t},queryParams:s})}async getCommitDiffs(e,t,r,s,o,i,a){const n={diffCommonCommit:r,$top:s,$skip:o};return i&&(n.baseVersionType=i.versionType,n.baseVersion=i.version,n.baseVersionOptions=i.versionOptions),a&&(n.targetVersionType=a.versionType,n.targetVersion=a.version,n.targetVersionOptions=a.versionOptions),this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/diffs/commits",routeValues:{project:t,repositoryId:e},queryParams:n})}async getCommit(e,t,r,s){const o={changeCount:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Commits/{commitId}",routeValues:{project:r,commitId:e,repositoryId:t},queryParams:o})}async getCommits(e,t,r,s,o){const i={searchCriteria:t,$skip:s,$top:o};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Commits/{commitId}",routeValues:{project:r,repositoryId:e},queryParams:i})}async getPushCommits(e,t,r,s,o,i){const a={pushId:t,top:s,skip:o,includeLinks:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Commits/{commitId}",routeValues:{project:r,repositoryId:e},queryParams:a})}async getCommitsBatch(e,t,r,s,o,i){const a={$skip:s,$top:o,includeStatuses:i};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/CommitsBatch",routeValues:{project:r,repositoryId:t},queryParams:a,body:e})}async getDeletedRepositories(e){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/DeletedRepositories",routeValues:{project:e}})}async getFileDiffs(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/FileDiffs",routeValues:{project:t,repositoryId:r},body:e})}async getFilePaths(e,t,r,s){const o={scopePath:r,versionDescriptor:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/FilePaths/{*scopepath}",routeValues:{project:e,repositoryId:t},queryParams:o})}async getForks(e,t,r,s){const o={includeLinks:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/forks/{collectionId}",routeValues:{project:r,repositoryNameOrId:e,collectionId:t},queryParams:o})}async createForkSyncRequest(e,t,r,s){const o={includeLinks:s};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/forkSyncRequests/{forkSyncOperationId}",routeValues:{project:r,repositoryNameOrId:t},queryParams:o,body:e})}async getForkSyncRequest(e,t,r,s){const o={includeLinks:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/forkSyncRequests/{forkSyncOperationId}",routeValues:{project:r,repositoryNameOrId:e,forkSyncOperationId:t},queryParams:o})}async getForkSyncRequests(e,t,r,s){const o={includeAbandoned:r,includeLinks:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/forkSyncRequests/{forkSyncOperationId}",routeValues:{project:t,repositoryNameOrId:e},queryParams:o})}async validateRemoteRepository(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/import/ImportRepositoryValidations",routeValues:{project:t},body:e})}async createImportRequest(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/importRequests/{importRequestId}",routeValues:{project:t,repositoryId:r},body:e})}async getImportRequest(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/importRequests/{importRequestId}",routeValues:{project:e,repositoryId:t,importRequestId:r}})}async queryImportRequests(e,t,r){const s={includeAbandoned:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/importRequests/{importRequestId}",routeValues:{project:e,repositoryId:t},queryParams:s})}async updateImportRequest(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/importRequests/{importRequestId}",routeValues:{project:t,repositoryId:r,importRequestId:s},body:e})}async getItem(e,t,r,s,o,i,a,n,p,c,u,l){const d={path:t,scopePath:s,recursionLevel:o,includeContentMetadata:i,latestProcessedChange:a,download:n,versionDescriptor:p,includeContent:c,resolveLfs:u,sanitize:l};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Items/{*path}",routeValues:{project:r,repositoryId:e},queryParams:d})}async getItemContent(e,t,r,s,o,i,a,n,p,c,u,l){const d={path:t,scopePath:s,recursionLevel:o,includeContentMetadata:i,latestProcessedChange:a,download:n,versionDescriptor:p,includeContent:c,resolveLfs:u,sanitize:l};return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"application/octet-stream",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Items/{*path}",routeValues:{project:r,repositoryId:e},queryParams:d})}async getItems(e,t,r,s,o,i,a,n,p){const c={scopePath:r,recursionLevel:s,includeContentMetadata:o,latestProcessedChange:i,download:a,includeLinks:n,versionDescriptor:p};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Items/{*path}",routeValues:{project:t,repositoryId:e},queryParams:c})}async getItemText(e,t,r,s,o,i,a,n,p,c,u,l){const d={path:t,scopePath:s,recursionLevel:o,includeContentMetadata:i,latestProcessedChange:a,download:n,versionDescriptor:p,includeContent:c,resolveLfs:u,sanitize:l};return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"text/plain",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Items/{*path}",routeValues:{project:r,repositoryId:e},queryParams:d})}async getItemZip(e,t,r,s,o,i,a,n,p,c,u,l){const d={path:t,scopePath:s,recursionLevel:o,includeContentMetadata:i,latestProcessedChange:a,download:n,versionDescriptor:p,includeContent:c,resolveLfs:u,sanitize:l};return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Items/{*path}",routeValues:{project:r,repositoryId:e},queryParams:d})}async getItemsBatch(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/ItemsBatch",routeValues:{project:r,repositoryId:t},body:e})}async getMergeBases(e,t,r,s,o,i){const a={otherCommitId:r,otherCollectionId:o,otherRepositoryId:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/commits/{commitId}/mergeBases",routeValues:{project:s,repositoryNameOrId:e,commitId:t},queryParams:a})}async createMergeRequest(e,t,r,s){const o={includeLinks:s};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/merges/{mergeOperationId}",routeValues:{project:t,repositoryNameOrId:r},queryParams:o,body:e})}async getMergeRequest(e,t,r,s){const o={includeLinks:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryNameOrId}/merges/{mergeOperationId}",routeValues:{project:e,repositoryNameOrId:t,mergeOperationId:r},queryParams:o})}async getPolicyConfigurations(e,t,r,s,o,a){const n={repositoryId:t,refName:r,policyType:s,$top:o,continuationToken:a};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/policy/configurations",routeValues:{project:e},queryParams:n,returnRawResponse:!0}).then(async e=>({policyConfigurations:await e.text().then(i.deserializeVssJsonObject),continuationToken:e.headers.get("x-ms-continuationtoken")}))}async createAttachment(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}",routeValues:{project:o,fileName:t,repositoryId:r,pullRequestId:s},customHeaders:{"Content-Type":"application/octet-stream"},body:e,isRawData:!0})}async deleteAttachment(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}",routeValues:{project:s,fileName:e,repositoryId:t,pullRequestId:r}})}async getAttachmentContent(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"application/octet-stream",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}",routeValues:{project:s,fileName:e,repositoryId:t,pullRequestId:r}})}async getAttachments(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}",routeValues:{project:r,repositoryId:e,pullRequestId:t}})}async getAttachmentZip(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}",routeValues:{project:s,fileName:e,repositoryId:t,pullRequestId:r}})}async createLike(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}/likes",routeValues:{project:o,repositoryId:e,pullRequestId:t,threadId:r,commentId:s}})}async deleteLike(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}/likes",routeValues:{project:o,repositoryId:e,pullRequestId:t,threadId:r,commentId:s}})}async getLikes(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}/likes",routeValues:{project:o,repositoryId:e,pullRequestId:t,threadId:r,commentId:s}})}async getPullRequestIterationCommits(e,t,r,s,o,i){const a={top:o,skip:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/commits",routeValues:{project:s,repositoryId:e,pullRequestId:t,iterationId:r},queryParams:a})}async getPullRequestCommits(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/commits",routeValues:{project:r,repositoryId:e,pullRequestId:t},returnRawResponse:!0}).then(async e=>{const t=await e.text().then(i.deserializeVssJsonObject);return t.continuationToken=e.headers.get("x-ms-continuationtoken"),t})}async getPullRequestConflict(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts/{conflictId}",routeValues:{project:s,repositoryId:e,pullRequestId:t,conflictId:r}})}async getPullRequestConflicts(e,t,r,s,o,i,a,n){const p={$skip:s,$top:o,includeObsolete:i,excludeResolved:a,onlyResolved:n};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts/{conflictId}",routeValues:{project:r,repositoryId:e,pullRequestId:t},queryParams:p})}async updatePullRequestConflict(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts/{conflictId}",routeValues:{project:o,repositoryId:t,pullRequestId:r,conflictId:s},body:e})}async updatePullRequestConflicts(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/conflicts/{conflictId}",routeValues:{project:s,repositoryId:t,pullRequestId:r},body:e})}async getPullRequestIterationChanges(e,t,r,s,o,i,a){const n={$top:o,$skip:i,$compareTo:a};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/changes",routeValues:{project:s,repositoryId:e,pullRequestId:t,iterationId:r},queryParams:n})}async getPullRequestIteration(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}",routeValues:{project:s,repositoryId:e,pullRequestId:t,iterationId:r}})}async getPullRequestIterations(e,t,r,s){const o={includeCommits:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}",routeValues:{project:r,repositoryId:e,pullRequestId:t},queryParams:o})}async createPullRequestIterationStatus(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}",routeValues:{project:o,repositoryId:t,pullRequestId:r,iterationId:s},body:e})}async deletePullRequestIterationStatus(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}",routeValues:{project:o,repositoryId:e,pullRequestId:t,iterationId:r,statusId:s}})}async getPullRequestIterationStatus(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}",routeValues:{project:o,repositoryId:e,pullRequestId:t,iterationId:r,statusId:s}})}async getPullRequestIterationStatuses(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}",routeValues:{project:s,repositoryId:e,pullRequestId:t,iterationId:r}})}async updatePullRequestIterationStatuses(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}",routeValues:{project:o,repositoryId:t,pullRequestId:r,iterationId:s},customHeaders:{"Content-Type":"application/json-patch+json"},body:e})}async createPullRequestLabel(e,t,r,s,o){const i={projectId:o};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels/{labelIdOrName}",routeValues:{project:s,repositoryId:t,pullRequestId:r},queryParams:i,body:e})}async deletePullRequestLabels(e,t,r,s,o){const i={projectId:o};return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels/{labelIdOrName}",routeValues:{project:s,repositoryId:e,pullRequestId:t,labelIdOrName:r},queryParams:i})}async getPullRequestLabel(e,t,r,s,o){const i={projectId:o};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels/{labelIdOrName}",routeValues:{project:s,repositoryId:e,pullRequestId:t,labelIdOrName:r},queryParams:i})}async getPullRequestLabels(e,t,r,s){const o={projectId:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels/{labelIdOrName}",routeValues:{project:r,repositoryId:e,pullRequestId:t},queryParams:o})}async getPullRequestProperties(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/properties",routeValues:{project:r,repositoryId:e,pullRequestId:t}})}async updatePullRequestProperties(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/properties",routeValues:{project:s,repositoryId:t,pullRequestId:r},customHeaders:{"Content-Type":"application/json-patch+json"},body:e})}async getPullRequestQuery(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/PullRequestQuery",routeValues:{project:r,repositoryId:t},body:e})}async createPullRequestReviewer(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PUT",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:o,repositoryId:t,pullRequestId:r,reviewerId:s},body:e})}async createPullRequestReviewers(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:s,repositoryId:t,pullRequestId:r},body:e})}async createUnmaterializedPullRequestReviewer(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PUT",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:s,repositoryId:t,pullRequestId:r},body:e})}async deletePullRequestReviewer(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:s,repositoryId:e,pullRequestId:t,reviewerId:r}})}async getPullRequestReviewer(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:s,repositoryId:e,pullRequestId:t,reviewerId:r}})}async getPullRequestReviewers(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:r,repositoryId:e,pullRequestId:t}})}async updatePullRequestReviewer(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:o,repositoryId:t,pullRequestId:r,reviewerId:s},body:e})}async updatePullRequestReviewers(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}",routeValues:{project:s,repositoryId:t,pullRequestId:r},body:e})}async getPullRequestById(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/pullRequests/{pullRequestId}",routeValues:{project:t,pullRequestId:e}})}async getPullRequestsByProject(e,t,r,s,o){const i={searchCriteria:t,maxCommentLength:r,$skip:s,$top:o};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/pullRequests",routeValues:{project:e},queryParams:i})}async createPullRequest(e,t,r,s){const o={supportsIterations:s};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}",routeValues:{project:r,repositoryId:t},queryParams:o,body:e})}async getPullRequest(e,t,r,s,o,i,a,n){const p={maxCommentLength:s,$skip:o,$top:i,includeCommits:a,includeWorkItemRefs:n};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}",routeValues:{project:r,repositoryId:e,pullRequestId:t},queryParams:p})}async getPullRequests(e,t,r,s,o,i){const a={searchCriteria:t,maxCommentLength:s,$skip:o,$top:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}",routeValues:{project:r,repositoryId:e},queryParams:a})}async updatePullRequest(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}",routeValues:{project:s,repositoryId:t,pullRequestId:r},body:e})}async sharePullRequest(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/share",routeValues:{project:s,repositoryId:t,pullRequestId:r},body:e})}async createPullRequestStatus(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}",routeValues:{project:s,repositoryId:t,pullRequestId:r},body:e})}async deletePullRequestStatus(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}",routeValues:{project:s,repositoryId:e,pullRequestId:t,statusId:r}})}async getPullRequestStatus(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}",routeValues:{project:s,repositoryId:e,pullRequestId:t,statusId:r}})}async getPullRequestStatuses(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}",routeValues:{project:r,repositoryId:e,pullRequestId:t}})}async updatePullRequestStatuses(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}",routeValues:{project:s,repositoryId:t,pullRequestId:r},customHeaders:{"Content-Type":"application/json-patch+json"},body:e})}async createComment(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}",routeValues:{project:o,repositoryId:t,pullRequestId:r,threadId:s},body:e})}async deleteComment(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}",routeValues:{project:o,repositoryId:e,pullRequestId:t,threadId:r,commentId:s}})}async getComment(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}",routeValues:{project:o,repositoryId:e,pullRequestId:t,threadId:r,commentId:s}})}async getComments(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}",routeValues:{project:s,repositoryId:e,pullRequestId:t,threadId:r}})}async updateComment(e,t,r,s,o,i){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}",routeValues:{project:i,repositoryId:t,pullRequestId:r,threadId:s,commentId:o},body:e})}async createThread(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}",routeValues:{project:s,repositoryId:t,pullRequestId:r},body:e})}async getPullRequestThread(e,t,r,s,o,i){const a={$iteration:o,$baseIteration:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}",routeValues:{project:s,repositoryId:e,pullRequestId:t,threadId:r},queryParams:a})}async getThreads(e,t,r,s,o){const i={$iteration:s,$baseIteration:o};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}",routeValues:{project:r,repositoryId:e,pullRequestId:t},queryParams:i})}async updateThread(e,t,r,s,o){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}",routeValues:{project:o,repositoryId:t,pullRequestId:r,threadId:s},body:e})}async getPullRequestWorkItemRefs(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/workitems",routeValues:{project:r,repositoryId:e,pullRequestId:t}})}async createPush(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.2",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pushes/{pushId}",routeValues:{project:r,repositoryId:t},body:e})}async getPush(e,t,r,s,o){const i={includeCommits:s,includeRefUpdates:o};return this.beginRequest({apiVersion:"5.0-preview.2",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pushes/{pushId}",routeValues:{project:r,repositoryId:e,pushId:t},queryParams:i})}async getPushes(e,t,r,s,o){const i={$skip:r,$top:s,searchCriteria:o};return this.beginRequest({apiVersion:"5.0-preview.2",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/pushes/{pushId}",routeValues:{project:t,repositoryId:e},queryParams:i})}async deleteRepositoryFromRecycleBin(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/recycleBin/repositories/{repositoryId}",routeValues:{project:e,repositoryId:t}})}async getRecycleBinRepositories(e){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/recycleBin/repositories/{repositoryId}",routeValues:{project:e}})}async restoreRepositoryFromRecycleBin(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/recycleBin/repositories/{repositoryId}",routeValues:{project:t,repositoryId:r},body:e})}async getRefs(e,t,r,s,o,a,n,p,c,u,l){const d={filter:r,includeLinks:s,includeStatuses:o,includeMyBranches:a,latestStatusesOnly:n,peelTags:p,filterContains:c,$top:u,continuationToken:l};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/refs/{*filter}",routeValues:{project:t,repositoryId:e},queryParams:d,returnRawResponse:!0}).then(async e=>{const t=await e.text().then(i.deserializeVssJsonObject);return t.continuationToken=e.headers.get("x-ms-continuationtoken"),t})}async updateRef(e,t,r,s,o){const i={filter:r,projectId:o};return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/refs/{*filter}",routeValues:{project:s,repositoryId:t},queryParams:i,body:e})}async updateRefs(e,t,r,s){const o={projectId:s};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/refs/{*filter}",routeValues:{project:r,repositoryId:t},queryParams:o,body:e})}async createFavorite(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/favorites/refs/{favoriteId}",routeValues:{project:t},body:e})}async deleteRefFavorite(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/favorites/refs/{favoriteId}",routeValues:{project:e,favoriteId:t}})}async getRefFavorite(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/favorites/refs/{favoriteId}",routeValues:{project:e,favoriteId:t}})}async getRefFavorites(e,t,r){const s={repositoryId:t,identityId:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/favorites/refs/{favoriteId}",routeValues:{project:e},queryParams:s})}async createRepository(e,t,r){const s={sourceRef:r};return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:t},queryParams:s,body:e})}async deleteRepository(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"DELETE",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:t,repositoryId:e}})}async getRepositories(e,t,r,s){const o={includeLinks:t,includeAllUrls:r,includeHidden:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:e},queryParams:o})}async getRepository(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:t,repositoryId:e}})}async getRepositoryWithParent(e,t,r){const s={includeParent:t};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:r,repositoryId:e},queryParams:s})}async updateRepository(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"PATCH",routeTemplate:"{project}/_apis/git/Repositories/{repositoryId}",routeValues:{project:r,repositoryId:t},body:e})}async createRevert(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/reverts/{revertId}",routeValues:{project:t,repositoryId:r},body:e})}async getRevert(e,t,r){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/reverts/{revertId}",routeValues:{project:e,revertId:t,repositoryId:r}})}async getRevertForRefName(e,t,r){const s={refName:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/reverts/{revertId}",routeValues:{project:e,repositoryId:t},queryParams:s})}async createCommitStatus(e,t,r,s){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/Statuses",routeValues:{project:s,commitId:t,repositoryId:r},body:e})}async getStatuses(e,t,r,s,o,i){const a={top:s,skip:o,latestOnly:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/Statuses",routeValues:{project:r,commitId:e,repositoryId:t},queryParams:a})}async getSuggestions(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/suggestions",routeValues:{project:t,repositoryId:e}})}async getTemplateList(e,t){const r={type:t};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/templates",routeValues:{project:e},queryParams:r})}async getTreeDiffs(e,t,r,s,o,a){const n={baseId:r,targetId:s,$top:o,continuationToken:a};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/diffs/trees",routeValues:{project:e,repositoryId:t},queryParams:n,returnRawResponse:!0}).then(async e=>{const t=await e.text().then(i.deserializeVssJsonObject),r=e.headers.get("x-ms-continuationtoken");return{treeDiff:t,continuationToken:r?r.split(","):[]}})}async getTree(e,t,r,s,o,i){const a={projectId:s,recursive:o,fileName:i};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Trees/{sha1}",routeValues:{project:r,repositoryId:e,sha1:t},queryParams:a})}async getTreeZip(e,t,r,s,o,i){const a={projectId:s,recursive:o,fileName:i};return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/Trees/{sha1}",routeValues:{project:r,repositoryId:e,sha1:t},queryParams:a})}},options:{resourceAreaId:"4e080c62-fa21-4fbc-8fef-2a10a2b38049",serviceInstanceType:"00025394-6065-48ca-87d9-7f5672854ef7"}})}("RestClientGit"),function(e){V=t.UtilsRef={};const r="refs/heads/",s="refs/tags/";function o(e){return 0===(e||"").indexOf(r)}function i(e){return 0===(e||"").indexOf(s)}t.UtilsRef.getFriendlyName=function(e){return o(e)?e.substr(r.length):i(e)?e.substr(s.length):e},t.UtilsRef.getRefNameFromBranchName=function(e){return r+e},t.UtilsRef.getRefNameFromTagName=function(e){return s+e},t.UtilsRef.isBranch=o,t.UtilsRef.isTag=i,t.UtilsRef.getVersionFromBranchName=function(e){return"GB"+e},t.UtilsRef.getVersionFromTagName=function(e){return"GT"+e},t.UtilsRef.getVersionFromCommitHash=function(e){return"GC"+e},t.UtilsRef.getShortCommitId=function(e){return e.substring(0,8)}}(),function(e){var s;C=t.GitRefFavoritesService={},function(e){e.artifactType="Microsoft.TeamFoundation.Git.GitRefFavorite",e.artifactScopeType="Repository"}(s=t.GitRefFavoritesService.GitRefFavoriteArtifactConstants||(t.GitRefFavoritesService.GitRefFavoriteArtifactConstants={}));class o extends r.ObservableArray{dispose(){}}function i(e){return{id:e.id.toString(),artifactId:e.name,artifactName:(0,V.getFriendlyName)(e.name),artifactScope:{id:e.repositoryId,type:s.artifactScopeType},artifactType:s.artifactType}}t.GitRefFavoritesService.GitRefFavoritesService=class{constructor(e,t,r){this.gitRestClient=e,this.canFavorites=t,this.projectId=r,this._favoritesCollection=new o([])}canUseFavorites(){return this.canFavorites}canFetchExtendedDetails(){return!1}async getFavorites(e,t,r){if(e!==s.artifactType)throw new Error(`Type ${e} not valid. GitRefFavoritesService only supports ${s.artifactType}.`);if(t!==s.artifactScopeType)throw new Error(`Scope ${t} not valid. GitRefFavoritesService only supports ${s.artifactScopeType}.`);return this._favoritesPromise||(this._favoritesPromise=this.gitRestClient.getRefFavorites(this.projectId,r)),this._favoritesPromise.then(e=>(this._favoritesCollection=new o(e.filter(e=>2===e.type).map(i)),this._favoritesCollection))}getCurrentFolderFavorites(){if(!this._favoritesPromise)throw new Error("Favorites not loading yet.");return this._favoritesPromise.then(e=>e.filter(e=>1===e.type).map(e=>e.name))}async addFavorite(e){this._favoritesCollection.push(e);const t=await this.gitRestClient.createFavorite(function(e){return{id:e.id&&parseInt(e.id),name:e.artifactId,repositoryId:e.artifactScope.id,type:2}}(e),this.projectId);return e.id=t.id.toString(),e}async removeFavorite(e){this._favoritesCollection.removeAll(t=>t.id===e.id),await this.gitRestClient.deleteRefFavorite(this.projectId,parseInt(e.id))}}}(),function(e){w=t.GitRefService={};class r extends Array{constructor(e,t){if("number"==typeof e)super(e);else{super();for(const t of e)this.push(t);this.continuationToken=t}}}t.GitRefService.PagedList=r;const a=void 0,n=200;class p extends s.VssService{constructor(){super(...arguments),this.myBranchesByRepository={},this.branchesByRepository={},this.tagsByRepository={},this.refsByArea={heads:this.branchesByRepository,tags:this.tagsByRepository},this.branchesChangedListeners=[],this.tagsChangedListeners=[],this.searchBranches=((e,t,r,s)=>this.searchPagedRefs(e,t,r,"heads",s)),this.searchTags=((e,t,r,s)=>this.searchPagedRefs(e,t,r,"tags",s))}getMyBranches(e,t){return this.myBranchesByRepository[e]||(this.myBranchesByRepository[e]=this.getGitClient().getRefs(e,t,void 0,!1,!1,!0).then(u)),this.myBranchesByRepository[e]}getPagedBranches(e,t){return this.getPagedRefs(e,t,"heads")}getMoreBranches(e,t,r){return this.getMoreRefs(e,t,r,"heads")}getPagedTags(e,t){return this.getPagedRefs(e,t,"tags")}getMoreTags(e,t,r){return this.getMoreRefs(e,t,r,"tags")}invalidateBranchesCache(e){delete this.myBranchesByRepository[e],delete this.branchesByRepository[e];for(const e of this.branchesChangedListeners)e()}registerBranchesChangedListener(e){this.branchesChangedListeners.push(e)}unregisterBranchesChangedListener(e){const t=this.branchesChangedListeners.indexOf(e);t>=0&&this.branchesChangedListeners.slice(t,1)}invalidateTagsCache(e){delete this.tagsByRepository[e];for(const e of this.tagsChangedListeners)e()}registerTagsChangedListener(e){this.tagsChangedListeners.push(e)}unregisterTagsChangedListener(e){const t=this.tagsChangedListeners.indexOf(e);t>=0&&this.tagsChangedListeners.slice(t,1)}async getPagedRefs(e,t,r){let s=this.getCachedRefs(r,e);if(!s){s=this.getRefPaginatedClient().getPaginatedRefs(e,t,r,a,n),this.cacheRefs(r,e,s)}return s}async getMoreRefs(e,t,s,o){const i=this.getCachedRefs(o,e);if(!i)return this.getPagedRefs(e,t,o);const p=await i;if(!p.continuationToken||p.continuationToken!==s)return p;const c=this.getRefPaginatedClient().getPaginatedRefs(e,t,o,a,n,p.continuationToken).then(e=>new r([...p,...e],e.continuationToken));return this.cacheRefs(o,e,c),c}async searchPagedRefs(e,t,s,o,i){const a=this.getCachedRefs(o,e);if(a){const e=await a;if(!e.continuationToken){const t=e.filter(e=>-1!==e.name.toLowerCase().indexOf(s.toLowerCase()));return new r(t)}}return this.getRefPaginatedClient().getPaginatedRefs(e,t,o,s,n,i)}getRefPaginatedClient(){return this.pageContext.getRestClient("IPaginatedGitRefRestClient")}getGitClient(){return this.pageContext.getRestClient("IGitRestClient")}getCachedRefs(e,t){return this.refsByArea[e][t]}cacheRefs(e,t,r){this.refsByArea[e][t]=r}}t.GitRefService.GitRefService=p,s.Services.add("IDeprecatedGitRefService",{serviceFactory:p,options:2});class c extends o.RestClientBase{async getPaginatedRefs(e,t,s,o,a,n){const p={filter:s,filterContains:o,$top:a,continuationToken:n};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/git/repositories/{repositoryId}/refs/{*filter}",routeValues:{project:t,repositoryId:e},queryParams:p,returnRawResponse:!0}).then(async e=>new r(await e.text().then(i.deserializeVssJsonObject),function(e){return e.headers.get("x-ms-continuationtoken")||void 0}(e)))}}function u(e){return e.filter(e=>(0,V.isBranch)(e.name))}t.GitRefService.PaginatedGitRefRestClient=c;s.RestClients.add("IPaginatedGitRefRestClient",{factory:c,options:{serviceInstanceType:"00025394-6065-48ca-87d9-7f5672854ef7"}})}(),function(e){t.GitRepositoryService={};s.Services.add("IDeprecatedGitRepositoryService",{serviceFactory:class extends s.VssService{constructor(){super(...arguments),this.repositoriesByProject={}}getAllRepositories(e){let t=this.repositoriesByProject[e||""];return t||(t=this.pageContext.getRestClient("IGitRestClient").getRepositories(e),this.repositoriesByProject[e||""]=t),t}getRepositoryById(e,t){return this.pageContext.getRestClient("IGitRestClient").getRepository(e,t)}}})}(),P=t.Helpers={},(F=t.Helpers.BranchName||(t.Helpers.BranchName={})).getHeadRelativeName=function(e){return e.substring(e.indexOf("/",e.indexOf("/")+1)+1)},F.getParentName=function(e){return e.substring(0,e.lastIndexOf("/"))},F.getShortName=function(e){return e.substring(e.lastIndexOf("/")+1)},function(e){const t="WebAccess.RepositoryOverview.Enable";e.isRepositoryOverviewHubEnabled=function(e){return(0,a.isFeatureFlagEnabled)(e,t,!1)}}(t.Helpers.FeatureFlags||(t.Helpers.FeatureFlags={})),function(e){var r;t.Navigation={},function(e){e.Branches="ms.vss-code-web.branches-route",e.BranchesCompare="ms.vss-code-web.branch-compare-route",e.Changeset="ms.vss-code-web.tfvc-changeset-details-route",e.Commit="ms.vss-code-web.commit-route",e.Commits="ms.vss-code-web.commits-route",e.Shelveset="ms.vss-code-web.tfvc-shelveset-details-route",e.TfvcFiles="ms.vss-code-web.tfvc-files-route",e.GitFiles="ms.vss-code-web.files-route-git",e.Pushes="ms.vss-code-web.pushes-route",e.Tags="ms.vss-code-web.tags-route",e.PullRequests="ms.vss-code-web.pull-request-list-route",e.PullRequest="ms.vss-code-web.pull-request-review-route",e.MyPullRequests="ms.vss-code-web.my-pullrequests-me-page-route",e.GitOverview="ms.vss-code-web.repository-overview-git-route",e.TfvcOverview="ms.vss-code-web.repository-overview-tfvc-route"}(r=t.Navigation.RouteIds||(t.Navigation.RouteIds={}));const o={"ms.vss-code-web.git-repository-overview":r.GitOverview,"ms.vss-code-web.files-hub-git":r.GitFiles,"ms.vss-code-web.branches-hub":r.Branches,"ms.vss-code-web.tags-hub":r.Tags,"ms.vss-code-web.pushes-hub":r.Pushes,"ms.vss-code-web.commits-hub":r.Commits,"ms.vss-code-web.pull-request-hub":r.PullRequests};s.Services.add("IVCNavigationService",{serviceFactory:class extends s.VssService{getData(){return this.pageContext.getService("IVssContributionService").getData("ms.vss-code-web.navigation-data-provider")}getTfvcCommitUrl(e,t,s){const o={};this._addDefaultRoutes(o,t,s);let i="";switch(e.charAt(0)){case"C":i=r.Changeset,o.parameters=encodeURIComponent(e.substring(1));break;case"L":case"W":case"D":return"";default:i=r.Shelveset,o.ss=e}return(0,n.routeUrl)(this.pageContext,i,o)}getGitCommitUrl(e,t,s,o){const i={};return this._addDefaultRoutes(i,s,o),t&&(i["vc.GitRepositoryName"]=t),i.parameters=encodeURIComponent(e),(0,n.routeUrl)(this.pageContext,r.Commit,i)}getRepositoryUrl(e,t,s,i,a){if(!i)if(e){const e=this.pageContext.getService("IVssNavigationService").getDisplayedNavigation()[3];i=o[e]||r.GitFiles}else i=r.TfvcFiles;let p={};return this._addDefaultRoutes(p,t,s),e&&(p["vc.GitRepositoryName"]=e),a&&(p=Object.assign(Object.assign({},a),p)),(0,n.routeUrl)(this.pageContext,i,p)}getPullRequestUrl(e,t,s){const o={};return this._addDefaultRoutes(o,s,null),t&&(o["vc.GitRepositoryName"]=t),o.parameters=e.toString(),(0,n.routeUrl)(this.pageContext,r.PullRequest,o)}getGitCompareCommitsUrl(e,t,s,o,i){let a={};return this._addDefaultRoutes(a,o,i),s&&(a["vc.GitRepositoryName"]=s),a.baseVersion="GC"+e,a.targetVersion="GC"+t,a._a="commits",(0,n.routeUrl)(this.pageContext,r.BranchesCompare,a)}getRefUrl(e,t,s,o){let i=r.GitFiles;t||(i=r.TfvcFiles);let a={};return this._addDefaultRoutes(a,s,o),t&&(a["vc.GitRepositoryName"]=t),0===e.indexOf("refs/heads/")?a.version="GB"+e.substring("refs/heads/".length):0===e.indexOf("refs/tags/")?a.version="GT"+e.substring("refs/tags/".length):i===r.TfvcFiles&&(a.path=e),(0,n.routeUrl)(this.pageContext,i,a)}getMyPullRequestsUrl(){return(0,n.routeUrl)(this.pageContext,r.MyPullRequests)}_addDefaultRoutes(e,t,r){if(!t||!r){const e=this.pageContext.getService("ITfsPageService").getData(),r=e&&e.project&&e.project.name;void 0===t&&r&&(t=r)}t&&(e.project=t),r&&(e.team=r)}}})}(),function(e){t.MenuProvider={};s.Services.add("code-hub-group-menu-provider",{serviceFactory:class extends s.VssService{loadItems(e){const t=this.pageContext.getService("IVCNavigationService"),r=t.getData();if(r){const s=this.pageContext.getService("ITfsPageService").getData(),o=s&&s.project?s.project.name:"",i=r.defaultRepoIsGit?r.defaultGitRepoName:"$/"+o,a=r.defaultRepoIsGit?"git":"tfvc-repo";e([{key:"vcRepoItem",className:"repo-menu-item",groupKey:"navigation",href:r.defaultRepoIsGit?r.defaultGitRepoUrl:t.getRepositoryUrl(null),name:i,iconProps:{iconName:"",className:"bowtie-icon bowtie-"+a},rank:50}])}}}})}(),function(e){t.MruRouteService={};s.Services.add("vc-mru-route-service",{serviceFactory:class extends s.VssService{constructor(){super(...arguments),this.id="vc-mru-route-service"}routeUrl(e,t){const r=this.pageContext.getService("IVssLocationService"),s=this.pageContext.getService("IVssContributionService").getData("ms.vss-code-web.versioncontrol-viewmodel-data-provider");return s&&(s.gitRepository?e.vcType="git":s.projectVersionControlInfo&&s.projectVersionControlInfo.supportsTFVC&&(e.vcType="tfvc")),r.routeUrl("ms.vss-code-web.code-redirect",e,t)}}})}(),function(e){j=t.UtilsSearch={},t.UtilsSearch.debouncePromiseFunction=function(e,t,r){let s,o;return function(...i){return s&&(clearTimeout(s),o&&o(r),o=void 0,s=void 0),new Promise(r=>{o=r,s=setTimeout(()=>{o=void 0,s=void 0,r(e.apply(null,i))},t)})}},t.UtilsSearch.reuseIfStrictlyStronger=function(e,t,r){let s,o;return(i,a)=>{const n=()=>(s=i,o=e(i,a));return function(e,t){return Boolean(e&&t&&e.toLowerCase().indexOf(t.toLowerCase())>=0)}(i,s)?o.then(e=>e&&r(e)?t(i,e):n()).catch(n):n()}},t.UtilsSearch.createValidator=function(e,t){return async(r,s)=>(await t(r),await e(r,s))},t.UtilsSearch.composeSearchByPivot=function(e,t){return(r,s,o)=>e[s||t](r,o)}}(),function(e){S=t.UtilsTelemetry={},t.UtilsTelemetry.startTelemetryTimer=function(e,t){const r=Date.now();return{publishTime:function(s,o){e.getService("IVssTelemetryService").publishEvent(b.VersionControlArea,t,Object.assign({action:s,elapsedMs:Date.now()-r},o))}}}}(),function(e){_=t.ProvidersVersionDropdownProvider={};const r=4,s=10,o=/^[0-9a-f]+$/i,i="VersionDropdownProvider",a="!";function n({viewMyBranches:e,viewTagsPivot:t,viewCommitsPivot:r},s){return[{key:"default",name:void 0,pivotId:"branches"},e&&{key:"favorites",name:T.VersionDropdown_MineBranches,pivotId:"branches"},{key:"all-branches",name:T.VersionDropdown_AllBranches,pivotId:"branches",isLoading:s["all-branches"]},t&&{key:"all-tags",name:void 0,pivotId:"tags",isLoading:s["all-tags"]},r&&{key:"found-commits",name:void 0,pivotId:"commits"}].filter(Boolean)}function c(e,t,r,s){const o=V.getFriendlyName(e.name),i=V.isTag(e.name);return{refName:e.name,friendlyName:o,versionString:i?V.getVersionFromTagName(o):V.getVersionFromBranchName(o),kind:i?"tag":"branch",isMine:e.creator&&e.creator.id===r,isDefault:e.name===t.defaultBranch,isFavoritedByFolder:!i&&u(e.name,s),repositoryId:t.id}}function u(e,t){return t.some(t=>e.startsWith(t+"/"))}function l(e,t,r){return!e||e.length>=r?e:e+Array(r-e.length+1).join(t)}function d(e,t){if(!e)return;const r="GT"===e.substring(0,2),s="GC"===e.substring(0,2);let o=e.substring(2);s&&(o=V.getShortCommitId(o));const i=V.getFriendlyName(t.defaultBranch);return{refName:r?V.getRefNameFromTagName(o):V.getRefNameFromBranchName(o),friendlyName:o,versionString:e,kind:s?"commit":r?"tag":"branch",isDefault:o===i,repositoryId:t.id}}function m(e){if("branch"===e.kind&&!e.isDefault&&!e.isMine)return{artifactId:e.refName,artifactName:e.friendlyName,artifactScope:{id:e.repositoryId,type:C.GitRefFavoriteArtifactConstants.artifactScopeType},artifactType:C.GitRefFavoriteArtifactConstants.artifactType}}function h(e){return"commit"===e.kind?"found-commits":"tag"===e.kind?"all-tags":e.isDefault?"default":e.isMine||e.isFavoritedByFolder?"favorites":"all-branches"}function g(e,t){return e.friendlyName.localeCompare(t.friendlyName)}function y(e){if(!e||e.length<r)throw new Error(T.VersionDropdown_CommitsSearchMinimumCharactersError);if(!o.test(e))throw new Error(T.VersionDropdown_CommitsSearchWrongCharactersError)}function R(e,t){return t.filter(t=>t.refName.startsWith(e))}function I(e,t){return t.filter(t=>-1!==t.friendlyName.toLowerCase().indexOf(e.toLowerCase()))}function v(e){return e.length<=s}function f(e){return!e.continuationToken}function q(e,t,r){return-1!==("commit"===r.kind?r.refName:t.name).toLowerCase().indexOf(e.toLowerCase())}t.ProvidersVersionDropdownProvider.VersionDropdownProvider=class extends p.ArtifactPickerProviderBase{constructor(e,t){super(),this.pageContext=e,this.options=t,this._continuationTokens={},this.minItemsForSearchBox=0,this.selectExactMatchOnEnter=!0,this.getPickListItems=(async e=>{if(!e)return[];const t=(0,S.startTelemetryTimer)(this.pageContext,i),r=await this.getRefs(e);if(this._continuationTokens[e]=r.continuationToken,!r.continuationToken){const t=this.getGroupsLoadingState();t[e]&&(t[e]=!1,this._artifactPickerOptions.groups=n(this.options,t))}const s=this.options.viewMyBranches?await this._gitRefFavoritesService.getCurrentFolderFavorites():[],o=r.map(e=>c(e,this.options.repository,this.options.currentIdentityId,s));return this.selectedItem&&"commit"===this.selectedItem.kind&&o.push(this.selectedItem),t.publishTime("getPickListItems",{groupKey:e,count:o.length,hasMore:Boolean(r.continuationToken)}),o}),this.searchCommits=(async e=>{const t=(0,S.startTelemetryTimer)(this.pageContext,i),r=this.pageContext.getRestClient("IGitRestClient"),{id:o,project:{id:a}}=this.options.repository,n=(await r.getCommitsBatch({fromCommitId:l(e,"0",40),toCommitId:l(e,"F",40)},o,a,0,s+1)).map(e=>(function(e,t){return{refName:e.commitId,friendlyName:V.getShortCommitId(e.commitId)+" "+e.comment,versionString:V.getVersionFromCommitHash(e.commitId),kind:"commit",repositoryId:t.id}})(e,this.options.repository));return t.publishTime("searchCommits",{count:n.length}),n}),this.searchBranchRefs=((e,t)=>this.searchRefs(e,t,"all-branches",this.getGitRefService().searchBranches)),this.searchTagRefs=((e,t)=>this.searchRefs(e,t,"all-tags",this.getGitRefService().searchTags));const r={artifactType:C.GitRefFavoriteArtifactConstants.artifactType,artifactScope:{id:t.repository.id,name:t.repository.name,type:C.GitRefFavoriteArtifactConstants.artifactScopeType}},o={branch:"OpenSource",tag:"Tag",commit:"BranchCommit"};let a,p=function(e){const t=e&&e.viewClearButton?()=>e.onVersionSelected&&e.onVersionSelected(null):void 0;return[{id:"branches",name:T.VersionDropdown_PivotBranches,getActions:()=>(function(e,t,r){const s=[];return e&&s.push({name:T.VersionDropdown_NewBranch,iconProps:{iconName:"Add"},onClick:()=>e()}),t&&s.push({name:T.VersionDropdown_ClearSelection,iconProps:{iconName:"Cancel"},disabled:r,onClick:t}),s})(e.onCreateBranchClick,t,!e.selectedVersionString),searchTextPlaceholder:T.VersionDropdown_BranchesSearchTextPlaceholder,searchNoResultsText:T.VersionDropdown_BranchesSearchNoResultsText},e.viewTagsPivot&&{id:"tags",name:T.VersionDropdown_PivotTags,searchTextPlaceholder:T.VersionDropdown_TagsSearchTextPlaceholder,searchNoResultsText:T.VersionDropdown_TagsSearchNoResultsText,noItemsText:T.VersionDropdown_TagsNoItemsText},e.viewCommitsPivot&&{id:"commits",name:T.VersionDropdown_PivotCommits,searchTextPlaceholder:T.VersionDropdown_CommitsSearchTextPlaceholder,searchNoResultsText:T.VersionDropdown_CommitsSearchNoResultsText,noItemsText:T.VersionDropdown_CommitsSearchMinimumCharactersError}].filter(Boolean)}(t),u=void 0;if(p&&1===p.length){const e=p[0].getActions;a=e&&e([]),u=p[0].searchTextPlaceholder,p=void 0}const{id:y}=t.repository.project;this._gitRefFavoritesService=this.getGitRefFavoritesService(y,t.viewMyBranches),this._artifactPickerOptions={pageContext:e,favoritesContext:r,favoritesService:this._gitRefFavoritesService,onArtifactClicked:e=>t.onVersionSelected&&t.onVersionSelected(e.versionString),selectedArtifact:d(t.selectedVersionString,t.repository),hideFavoriteSelectedItemIndicator:!0,getArtifacts:this.getPickListItems,getArtifactId:e=>e.refName,getArtifactName:e=>e.friendlyName,getArtifactIcon:e=>({iconType:0,iconName:o[e.kind]}),getFavoriteFromArtifact:m,getArtifactListGroupId:h,artifactComparer:g,groups:n(t,{"all-branches":!0,"all-tags":!0}),pivots:p,searchTextPlaceholder:u,otherActions:a,limitSearchToPivot:!0,getSearchResults:this.createSearchFunction(),getSearchResultsContinuationToken:e=>e.continuationToken,onFilterItemByText:q},this.initialize(this._artifactPickerOptions),this.getGitRefService().registerBranchesChangedListener(this.forgetCachedArtifacts),this._ariaLabelPrefix=t.ariaLabel}get ariaLabelFormat(){let e=T.VersionDropdown_BranchAriaLabel;return this.selectedItem&&("commit"===this.selectedItem.kind?e=T.VersionDropdown_CommitAriaLabel:"tag"===this.selectedItem.kind&&(e=T.VersionDropdown_TagAriaLabel)),this._ariaLabelPrefix?`${this._ariaLabelPrefix} ${e}`:e}dispose(){super.dispose(),this.getGitRefService().unregisterBranchesChangedListener(this.forgetCachedArtifacts)}getRefs(e){const t=this._continuationTokens[e],{id:r,project:{id:s}}=this.options.repository;return t?"all-tags"===e?this.getGitRefService().getMoreTags(r,s,t):this.getGitRefService().getMoreBranches(r,s,t):"all-tags"===e?this.getGitRefService().getPagedTags(r,s):this.options.viewMyBranches?this.getMyBranches():this.getGitRefService().getPagedBranches(r,s)}getMyBranches(){const{id:e,project:{id:t}}=this.options.repository;return this.getGitRefService().getMyBranches(e,t).then(e=>new w.PagedList(e,a))}getGitRefFavoritesService(e,t){const r=this.pageContext.getService("IFavoritesService"),s=this.pageContext.getRestClient("IGitRestClient");return new C.GitRefFavoritesService(s,t&&r.canUseFavorites(),e)}getGitRefService(){return this.pageContext.getService("IDeprecatedGitRefService")}createSearchFunction(){const e=e=>(0,j.debouncePromiseFunction)(e,1e3,[]),t=e=>(t,r)=>e(t&&t.trim(),r),r=e=>(0,j.reuseIfStrictlyStronger)(e,I,f);return(0,j.composeSearchByPivot)({branches:(e=>(t,r)=>this.isGroupFullyLoaded("all-branches")?Promise.resolve(void 0):e(t,r))(t(r(e(this.searchBranchRefs)))),tags:(e=>(t,r)=>this.isGroupFullyLoaded("all-tags")?Promise.resolve(void 0):e(t,r))(t(r(e(this.searchTagRefs)))),commits:t((e=>(0,j.createValidator)(e,y))((e=>(0,j.reuseIfStrictlyStronger)(e,R,v))(e(this.searchCommits))))},"branches")}async searchRefs(e,t,r,s){const o=(0,S.startTelemetryTimer)(this.pageContext,i);t||(t=this._continuationTokens[r]);const{id:a,project:{id:n}}=this.options.repository,p=await s(a,n,e,t),u=p.map(e=>c(e,this.options.repository,this.options.currentIdentityId,[]));return o.publishTime("searchRefs",{count:u.length,hasMore:Boolean(p.continuationToken)}),new w.PagedList(u,p.continuationToken)}getGroupsLoadingState(){return this._artifactPickerOptions&&this._artifactPickerOptions.groups?this._artifactPickerOptions.groups.reduce((e,t)=>Object.assign(Object.assign({},e),{[t.key]:t.isLoading}),{}):{}}isGroupFullyLoaded(e){return!this.getGroupsLoadingState()[e]}}}(),function(e){x=t.RepositoryPickerProvider={};const r="Microsoft.TeamFoundation.Git.Repository",s="RepositoryPickerProvider";function o(e){return{name:e.name,id:e.id,repository:e,isFork:e.isFork,isTfvc:!1}}t.RepositoryPickerProvider.RepositoryPickerProvider=class extends p.ArtifactPickerProviderBase{constructor(e,t){super(),this.minItemsForSearchBox=0,this.getPickListItems=(()=>{if(!this.itemsPromise){const e=(0,S.startTelemetryTimer)(this.pageContext,s),t=this.pageContext.getService("IDeprecatedGitRepositoryService");this.itemsPromise=t.getAllRepositories(this.projectId).then(t=>{const r=t.map(o);return r.sort((e,t)=>(0,u.localeIgnoreCaseComparer)(e.name,t.name)),this.supportsTfvc&&r.unshift({name:"$/"+this.projectName,isTfvc:!0,id:"tfvc",isFork:!1}),e.publishTime("getAllRepositories"),r})}return this.itemsPromise}),this.onSelectedItemChanged=(e=>{this.setSelectedItem(e);const{onArtifactClicked:t,getArtifactHref:r}=this.artifactPickerOptions;return t?t(e):r?(0,c.onClickFPS)(this.pageContext,r(e),!0,void 0,{telemetrySource:s}):void 0});const{actions:i,getItemHref:a,getRepositories:n,onRepositorySelected:p,selectedRepositoryIsTfvc:l,selectedRepositoryIsFork:d,selectedRepositoryId:m,selectedRepositoryName:h,supportsTfvc:g,projectName:y,projectId:R,defaultGroupHeader:I,favoriteGroupHeader:v,showFavoritesEarly:f=!0}=t;let q,b;this.pageContext=e,this.projectId=R,this.projectName=y,this.supportsTfvc=g,n&&(this.itemsPromise=n().then(e=>e.map(o))),l?q={name:"$/"+y,isTfvc:!0,id:"tfvc",isFork:!1}:h&&(q={name:h,isTfvc:!1,id:m||h,isFork:!!d}),b=y&&R?{artifactType:r,artifactScope:{id:R,name:y,type:"Project"}}:{artifactType:r,artifactScope:{id:"",name:"",type:"Collection"}},this.artifactPickerOptions={pageContext:e,favoritesContext:b,onArtifactClicked:p,selectedArtifact:q,defaultGroupHeader:I,favoriteGroupHeader:v,hideFavoriteSelectedItemIndicator:!0,getArtifacts:this.getPickListItems,getArtifactId:e=>e.id,getArtifactName:e=>e.name,getArtifactHref:a,getArtifactIcon:e=>({iconType:1,iconName:e.isTfvc?"tfvc-repo":e.isFork?"git-fork":"git"}),getArtifactFromFavorite:f?e=>({name:e.artifactName,id:e.artifactId,isTfvc:!1,isFork:!1}):void 0,getFavoriteFromArtifact:e=>e.repository?{artifactId:e.repository.id,artifactName:e.repository.name,artifactScope:{id:e.repository.project.id,name:e.repository.project.name,type:"Project"},artifactType:r}:void 0,artifactComparer:(e,t)=>e.name.localeCompare(t.name),otherActions:i,searchTextPlaceholder:T.SearchRepositoriesWatermark,ariaLabelFormat:T.RepositoryDropdown_AriaLabel},this.initialize(this.artifactPickerOptions)}async _loadFavorites(e=!1){const t=(0,S.startTelemetryTimer)(this.pageContext,s),r=await super._loadFavorites(e);return r&&t.publishTime("loadFavorites",{includeExtendedData:e}),r}}}(),function(e){t[e]={};t[e].TfvcClientName="ITfvcRestClient",t[e].getTfvcClient=function(r,s){return r.getRestClient(t[e].TfvcClientName,s)},s.RestClients.add(t[e].TfvcClientName,{factory:class extends o.RestClientBase{constructor(e){super(e)}async getBranch(e,t,r,s){const o={path:e,includeParent:r,includeChildren:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/tfvc/Branches/{*path}",routeValues:{project:t},queryParams:o})}async getBranches(e,t,r,s,o){const i={includeParent:t,includeChildren:r,includeDeleted:s,includeLinks:o};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/tfvc/Branches/{*path}",routeValues:{project:e},queryParams:i})}async getBranchRefs(e,t,r,s){const o={scopePath:e,includeDeleted:r,includeLinks:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/tfvc/Branches/{*path}",routeValues:{project:t},queryParams:o})}async getChangesetChanges(e,t,r){const s={$skip:t,$top:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"_apis/tfvc/changesets/{id}/changes",routeValues:{id:e},queryParams:s,returnRawResponse:!0}).then(async e=>{const t=await e.text().then(i.deserializeVssJsonObject);return t.continuationToken=e.headers.get("x-ms-continuationtoken"),t})}async createChangeset(e,t){return this.beginRequest({apiVersion:"5.0-preview.3",method:"POST",routeTemplate:"{project}/_apis/tfvc/changesets/{id}",routeValues:{project:t},body:e})}async getChangeset(e,t,r,s,o,i,a,n,p,c,u){const l={maxChangeCount:r,includeDetails:s,includeWorkItems:o,maxCommentLength:i,includeSourceRename:a,$skip:n,$top:p,$orderby:c,searchCriteria:u};return this.beginRequest({apiVersion:"5.0-preview.3",routeTemplate:"{project}/_apis/tfvc/changesets/{id}",routeValues:{project:t,id:e},queryParams:l})}async getChangesets(e,t,r,s,o,i){const a={maxCommentLength:t,$skip:r,$top:s,$orderby:o,searchCriteria:i};return this.beginRequest({apiVersion:"5.0-preview.3",routeTemplate:"{project}/_apis/tfvc/changesets/{id}",routeValues:{project:e},queryParams:a})}async getBatchedChangesets(e){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"_apis/tfvc/ChangesetsBatch",body:e})}async getChangesetWorkItems(e){return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"_apis/tfvc/changesets/{id}/workItems",routeValues:{id:e}})}async getItemsBatch(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",routeTemplate:"{project}/_apis/tfvc/ItemBatch",routeValues:{project:t},body:e})}async getItemsBatchZip(e,t){return this.beginRequest({apiVersion:"5.0-preview.1",method:"POST",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/tfvc/ItemBatch",routeValues:{project:t},body:e})}async getItem(e,t,r,s,o,i,a,n){const p={path:e,fileName:r,download:s,scopePath:o,recursionLevel:i,versionDescriptor:a,includeContent:n};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/tfvc/Items/{*path}",routeValues:{project:t},queryParams:p})}async getItemContent(e,t,r,s,o,i,a,n){const p={path:e,fileName:r,download:s,scopePath:o,recursionLevel:i,versionDescriptor:a,includeContent:n};return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"application/octet-stream",routeTemplate:"{project}/_apis/tfvc/Items/{*path}",routeValues:{project:t},queryParams:p})}async getItems(e,t,r,s,o){const i={scopePath:t,recursionLevel:r,includeLinks:s,versionDescriptor:o};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/tfvc/Items/{*path}",routeValues:{project:e},queryParams:i})}async getItemText(e,t,r,s,o,i,a,n){const p={path:e,fileName:r,download:s,scopePath:o,recursionLevel:i,versionDescriptor:a,includeContent:n};return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"text/plain",routeTemplate:"{project}/_apis/tfvc/Items/{*path}",routeValues:{project:t},queryParams:p})}async getItemZip(e,t,r,s,o,i,a,n){const p={path:e,fileName:r,download:s,scopePath:o,recursionLevel:i,versionDescriptor:a,includeContent:n};return this.beginRequest({apiVersion:"5.0-preview.1",httpResponseType:"application/zip",routeTemplate:"{project}/_apis/tfvc/Items/{*path}",routeValues:{project:t},queryParams:p})}async getLabelItems(e,t,r){const s={$top:t,$skip:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"_apis/tfvc/labels/{labelId}/items",routeValues:{labelId:e},queryParams:s})}async getLabel(e,t,r){const s={requestData:t};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/tfvc/Labels/{labelId}",routeValues:{project:r,labelId:e},queryParams:s})}async getLabels(e,t,r,s){const o={requestData:e,$top:r,$skip:s};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/tfvc/Labels/{labelId}",routeValues:{project:t},queryParams:o})}async getShelvesetChanges(e,t,r){const s={shelvesetId:e,$top:t,$skip:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"_apis/tfvc/shelvesets/changes",queryParams:s})}async getShelveset(e,t){const r={shelvesetId:e,requestData:t};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"_apis/tfvc/shelvesets",queryParams:r})}async getShelvesets(e,t,r){const s={requestData:e,$top:t,$skip:r};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"_apis/tfvc/shelvesets",queryParams:s})}async getShelvesetWorkItems(e){const t={shelvesetId:e};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"_apis/tfvc/shelvesets/workitems",queryParams:t})}async getTfvcStatistics(e,t){const r={scopePath:t};return this.beginRequest({apiVersion:"5.0-preview.1",routeTemplate:"{project}/_apis/tfvc/stats",routeValues:{project:e},queryParams:r})}},options:{resourceAreaId:"8aa40520-446d-40e6-89f6-9c9f9ce44c48",serviceInstanceType:"00025394-6065-48ca-87d9-7f5672854ef7"}})}("RestClientTfvc"),function(e){t.UtilsDate={},t.UtilsDate.isDateRecent=function(e){if(!e)return!1;const t=new Date;return Math.abs(t.getTime()-e.getTime())/36e5<24},t.UtilsDate.getDateString=function(e,t,r=!1){return e?t?(0,l.ago)(e):r?e.toLocaleDateString():e.toLocaleString():""}}(),function(e){k=t.ComponentsRepositoryDropdown={};t.ComponentsRepositoryDropdown.RepositoryDropdownComponent=class extends h.VssComponent{constructor(e,t){super(e,t),this.itemPicker=d.createRef(),this.pickerProvider=new x.RepositoryPickerProvider(t.pageContext,e.providerOptions)}render(){const{className:e,tabIndex:t,hideSelectedItemIcon:r,dropdownIconProps:s,isOpen:o,onToggleDropdown:i,ariaDescribedBy:a,onFocus:n,onFocusLost:p}=this.props;return d.createElement(g.ItemPickerDropdown,{ref:this.itemPicker,id:this.props.id,provider:this.pickerProvider,className:(0,m.css)("repository-selector",e),tabIndex:t,pickListClassName:"repository-selector-dropdown",hideSelectedItemIcon:r,dropdownIconProps:s,ariaDescribedBy:a,isOpen:o,onToggleDropdown:i,onFocus:n,onFocusLost:p})}componentDidMount(){super.componentDidMount(),this.props.componentRef&&this.props.componentRef(this)}componentWillReceiveProps(e){e.providerOptions!==this.props.providerOptions&&(this.pickerProvider=new x.RepositoryPickerProvider(this.context.pageContext,e.providerOptions))}focus(){this.itemPicker.current&&this.itemPicker.current.focus()}}}(),function(e){t.ComponentsCommandBarRepositorySelector={};const r="ms.vss-code-web.command-bar-repository-picker-actions";h.Components.add("navigation-repository-selector",class extends h.VssComponent{constructor(e,t){super(e,t),this.repositoryDropdown=d.createRef(),this.expand=((e,t,r)=>{this.props.expand&&this.props.expand(e,t,r)}),this.onToggleDropdown=(e=>{this.props.expand&&this.props.itemKey&&this.props.expand(this.props.itemKey,e)}),this.getActions=(()=>{const e=[];if(this.canCreateRepositories&&(e.push({name:T.NewRepository,iconProps:{iconName:"Add"},onClick:()=>{this.context.pageContext.getService("IVssLayoutManager").renderCallout(e=>d.createElement(R.LegacyComponent,{modules:["VersionControl/Scripts/Components/HeaderComponents/HeaderComponents"],wrappedType:"newRepositoryDialog",onClose:()=>{e()},isOverviewHubEnabled:P.FeatureFlags.isRepositoryOverviewHubEnabled(this.context.pageContext)},null))}}),e.push({name:T.ImportRepository,iconProps:{iconName:"Upload"},onClick:()=>{this.context.pageContext.getService("IVssLayoutManager").renderCallout(e=>d.createElement(R.LegacyComponent,{modules:["VersionControl/Scripts/Components/HeaderComponents/HeaderComponents"],wrappedType:"importRepositoryDialog",onClose:()=>{e()}},null))}})),this.canManageRepositories){const t=(0,n.routeUrl)(this.context.pageContext,"ms.vss-code-web.admin-version-control-route",{project:this.projectName});e.push({name:T.ManageRepositories,iconProps:{iconName:"Settings"},href:t})}return e}),this.menuItemsToPickListActions=(e=>{const t=[];return e.forEach(e=>{t.push({name:e.text||"",iconProps:e.iconProps,onClick:e.onActivate,href:e.href})}),t}),this.getItemHref=(e=>this.context.pageContext.getService("IVCNavigationService").getRepositoryUrl(e.isTfvc?null:e.name)),this.initializeData(e,t),this.state={selected:!1}}render(){return this.vcData&&this.projectName?d.createElement(I.CommandBarExpandableComponent,Object.assign({},this.props,{calloutId:this.props.expanded?"dropdown"+this.componentId:void 0,className:(0,h.css)("commandbar-item-menu",this.props.className),expandOnHover:!1,id:"cmec"+this.componentId,noTabIndex:!0,expand:this.expand}),d.createElement(v.Observer,{contributedActions:this.repositoryContributedActions},e=>d.createElement(k.RepositoryDropdownComponent,{ref:this.repositoryDropdown,className:"command-bar-repository-selector",id:"dropdown"+this.componentId,tabIndex:this.props.selected?0:-1,onFocus:this.props.onFocus,onFocusLost:this.props.onFocusLost,hideSelectedItemIcon:this.props.hideIcon,dropdownIconProps:this.props.useSmallDropdownIcon?{iconName:"ChevronDownSmall"}:void 0,providerOptions:{actions:[...this.repositoryActions,...this.menuItemsToPickListActions(e.contributedActions)],getItemHref:this.getItemHref,projectName:this.projectName,projectId:this.projectId,selectedRepositoryId:this.vcData&&this.vcData.defaultRepoId||"tfvc",selectedRepositoryName:this.vcData&&this.vcData.defaultGitRepoName,selectedRepositoryIsTfvc:this.vcData&&!this.vcData.defaultRepoIsGit,selectedRepositoryIsFork:this.vcData&&this.vcData.defaultRepoIsFork,supportsTfvc:this.vcData&&this.vcData.supportsTfvc},isOpen:this.props.expanded,onToggleDropdown:this.onToggleDropdown}))):null}componentDidUpdate(e){!e.selected&&this.props.selected&&this.repositoryDropdown.current&&this.repositoryDropdown.current.focus()}initializeData(e,t){const s=t.pageContext.getService("IVCNavigationService");this.vcData=s.getData();const o=t.pageContext.getService("ITfsPageService").getData();if(o&&o.project){this.projectName=o.project.name,this.projectId=o.project.id;const e=t.pageContext.getService("IVssSecurityService"),r=`repoV2/${this.projectId}/`;this.canCreateRepositories=e.hasPermission(b.GitConstants.GitSecurityNamespaceId,r,256),this.canManageRepositories=e.hasPermission(b.GitConstants.GitSecurityNamespaceId,r,1024)||e.hasPermission(b.GitConstants.GitSecurityNamespaceId,r,512)||e.hasPermission(b.GitConstants.GitSecurityNamespaceId,r,8192),this.favoritesContext={artifactType:"Microsoft.TeamFoundation.Git.Repository",artifactScope:{id:o.project.id,name:o.project.name,type:"Project"}}}else this.projectName=void 0,this.projectId=void 0,this.favoritesContext=void 0;this.repositoryActions=this.getActions(),this.repositoryContributedActions=(0,y.getMenuItems)(this.context.pageContext,r)}hasFocus(e){return!1}})}(),function(e){t.ComponentsHeaderComponents={};class r extends h.VssComponent{render(){return d.createElement(I.CommandBarChildComponent,Object.assign({},this.props,{noTabIndex:!0}),d.createElement(R.LegacyComponent,{key:this.props.wrappedComponentType,wrappedType:this.props.wrappedComponentType,modules:["VersionControl/Scripts/Components/HeaderComponents/HeaderComponents"],selected:this.props.selected}))}}r.componentType="versionControlActionHeader",h.VssComponent.register(r.componentType,r)}(),function(e){D=t.ComponentsVersionDropdown={};function r(e,t){const{prefix:r,lastName:s}="commit"===t.kind?{lastName:e.name}:function(e){const t=e.lastIndexOf("/");return t>0?{prefix:e.substring(0,t+1),lastName:e.substring(t+1)}:{lastName:e}}(e.name);return d.createElement("span",null,r&&d.createElement("span",{className:"prefix-name"},r),s,t.isDefault&&d.createElement("span",{className:"default-badge"},T.VersionDropdown_DefaultBadge))}t.ComponentsVersionDropdown.VersionDropdown=class extends h.VssComponent{constructor(e,t){super(e,t),this.provider=new _.VersionDropdownProvider(t.pageContext,e.providerOptions)}render(){const{className:e,dropdownClassName:t,id:s,tabIndex:o,hideSelectedItemIcon:i,dropdownIconProps:a,isOpen:n,autoFocus:p,isDrodownFullWidth:c,placeholderText:u,onToggleDropdown:l,titleTooltipFormat:h}=this.props;return d.createElement(g.ItemPickerDropdown,{id:s,provider:this.provider,className:(0,m.css)("version-selector",e),tabIndex:o,pickListClassName:(0,m.css)("version-selector-dropdown",t),hideSelectedItemIcon:i,dropdownIconProps:a,pickListWidth:c?void 0:350,isOpen:n,autoFocus:p,placeholderText:u,onRenderItemText:r,onToggleDropdown:l,titleTooltipFormat:h})}componentDidMount(){super.componentDidMount(),this.props.componentRef&&this.props.componentRef(this)}componentWillReceiveProps(e){(0,f.shallowCompare)(e.providerOptions,this.props.providerOptions)||(this.provider=new _.VersionDropdownProvider(this.context.pageContext,e.providerOptions))}}}(),function(e){t.ComponentsVersionDropdownAsync={};class r extends h.VssComponent{constructor(e,t){super(e,t),this.state={}}componentDidMount(){super.componentDidMount(),this.state.gitRepository||this._fetchGitRepository()}render(){const e=Object.assign(Object.assign({},this.props.versionDropdownProps.providerOptions),{repository:this.state.gitRepository||{}}),t=Object.assign(Object.assign({},this.props.versionDropdownProps),{providerOptions:e});return d.createElement(d.Fragment,null,this.state.gitRepository?d.createElement(D.VersionDropdown,Object.assign({},t)):d.createElement(q.Spinner,null))}_fetchGitRepository(){this.context.pageContext.getService("IDeprecatedGitRepositoryService").getRepositoryById(this.props.repositoryId,this.props.projectId).then(e=>{this.setState({gitRepository:e})})}}t.ComponentsVersionDropdownAsync.VersionDropdownAsync=r,h.Components.add("version-dropdown-async",r)}(),function(e){t.CreateMenuProvider={};s.Services.add("code-create-menu-provider",{serviceFactory:class extends s.VssService{constructor(){super(...arguments),this.menuItems=[]}_serviceStart(e){super._serviceStart(e);const t=this.pageContext.getService("IVCNavigationService").getData();if(t){const e=this.pageContext.getService("ITfsPageService").getData();if(e&&e.project){const r=e.project.name,s=e.project.id;if(t.defaultGitRepoName){const e={project:r};t.defaultGitRepoName!==r&&(e["vc.GitRepositoryName"]=t.defaultGitRepoName),this.menuItems.push({groupKey:"vc-actions",href:(0,n.routeUrl)(this.pageContext,"ms.vss-code-web.pull-request-create-route",e),iconProps:{iconName:"BranchPullRequest"},id:"vcNewPr",onActivate:(e,t)=>(0,c.onClickFPS)(this.pageContext,e.href,!0,t),rank:100,text:T.NewPullRequest})}this.menuItems.push({groupKey:"vc-actions",id:"vcNewRepo",onActivate:()=>{this.pageContext.getService("IVssLayoutManager").renderCallout(e=>d.createElement(h.WrappedComponent,{dependencies:["ms.vss-code-web.import-dependencies"],wrappedProps:{onCreate:e=>{e.then(e=>{(0,c.FastPageSwitch)(this.pageContext,e.repository.webUrl,!0)},m.noop)},onDismiss:e,projectId:s,projectName:r},wrappedType:"ms.vss-code-web.panel-create"}))},rank:100,text:T.NewRepository})}}}getMenuItems(e){return"ms.vss-tfs-web.vertical-header-create-menu"===e?this.menuItems:null}}})}()},["Resources","Contracts/Constants","Contracts/EnumToString","Flux/Action","Flux/Store","RestClient/Git","Utils/Ref","GitRefFavoritesService","GitRefService","GitRepositoryService","Helpers","Navigation","MenuProvider","MruRouteService","Utils/Search","Utils/Telemetry","Providers/VersionDropdownProvider","RepositoryPickerProvider","RestClient/Tfvc","Utils/Date","Components/RepositoryDropdown","Components/CommandBarRepositorySelector","Components/HeaderComponents","Components/VersionDropdown","Components/VersionDropdownAsync","CreateMenuProvider"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-code-web.common-content"}}));