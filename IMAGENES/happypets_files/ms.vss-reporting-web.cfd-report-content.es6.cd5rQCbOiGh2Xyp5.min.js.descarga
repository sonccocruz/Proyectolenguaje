"use strict";define("Reporting/CFDReport",["require","exports","Analytics/Boards/CumulativeFlowDiagramQueries/BoardsQuery","Widgets/CumulativeFlowDiagram/QueryUtilities","Analytics/Boards/CumulativeFlowDiagramQueries/BoardColumnsQuery","react","VSS/Platform/Layout","VSSUI/Dropdown","VSSUI/Utilities/DropdownSelection","VSS/Core/Util/String","Analytics/Boards/CumulativeFlowDiagramQueries/BoardSwimlaneQuery","Reporting/BoardsCommon/BoardsReport","Reporting/BoardsCommon/BoardsRoutingHelper","Reporting/BoardsCommon/ReportGuidedTourUtility","Reporting/BoardsCommon/ReportQueryHelper","Reporting/BoardsCommon/ReportTelemetry","Reporting/BoardsCommon/ResetElement","Reporting/BoardsCommon/Resources","Reporting/BoardsCommon/UnmaterializedBoardMessage","VSS/Core/Observable","VSS/Platform/Components/Layout","VSS/Platform/FPS","VSSUI/FormItem","VSSUI/TextField","WidgetCommon/DateUtils/DateUtils","Widgets/Configs/Common/GenericSelectionDropdown","Reporting/BoardsCommon/ReportPageState"],function(e,t,s,i,o,a,n,r,l,d,c,u,m,g,h,p,C,b,S,R,D,f,y,B,P,w,I){var x,L,T,v,F,k,N,O;x=t.Resources={},t.Resources.ReportTitle="Cumulative Flow Diagram",t.Resources.AllBoardLanesName="All",t.Resources.DefaultBoardLaneName="{0} (Default)",t.Resources.DeletedBoardColumnName="{0} (Deleted)",t.Resources.LastNDays="Last {0} days",t.Resources.CustomRollingPeriod="Custom rolling period",t.Resources.TourBubbleTitle="The Cumulative Flow Diagram",t.Resources.TourBubbleText="Get insights into your team's workload, throughput, and potential bottlenecks. ​To customize the report, set the columns, swimlanes, and timeframe. ​Click next to take a quick tour.",t.Resources.FilterBubbleTitle="CFD Configuration",t.Resources.FilterBubbleText="​Configure the CFD columns, swimlanes, and timeframe. Your selection will be saved next time you visit the report.",t.Resources.ChartBubbleTitle="CFD Chart",t.Resources.ChartBubbleText="The CFD shows the aggregated items in each Kanban column for the selected time period. This chart shows the amount of work in progress, a count of unfinished requirements, and lead time, the average amount of time it takes to complete a requirement from the time it is defined to when it is completed.",t.Resources.LegendBubbleTitle="CFD Chart Legend",t.Resources.LegendBubbleText="​Click the chart's legend to hide or show board columns.",t.Resources.UnmaterializedBoard="Information about the selected boards category for this team could not be found. Have you visited the corresponding boards page yet?",t.Resources.RollingPeriodLabel="Rolling period",t.Resources.CustomRollingPeriodLabel="Custom days",t.Resources.SwimlaneLabel="Swimlane",t.Resources.ColumnOptionsLabel="Column options",t.Resources.WidgetTitleWithoutSwimlaneFormat="{0} {1} CFD",t.Resources.WidgetTitleWithSwimlaneFormat="{0} {1} CFD ({2})",function(e){L=t.CfdReportUserSettings={};class s{static async reset(e,t,i){const o=e.getService("ISettingsService");await o.removeEntries("CFDReport",0,s.teamScopeName,t)}static async save(e,t,i,o){const a=e.getService("ISettingsService"),n=`CFDReport/${o}`,r={};r[n+"/"+s.daysKey]=t.chartDataSettings.timePeriod.settings,r[n+"/"+s.boardLaneKey]=t.chartDataSettings.boardLane,r[n+"/"+s.boardColumnsKey]=t.chartDataSettings.desiredBoardColumnIds,await a.setEntries(r,0,s.teamScopeName,i)}static async load(e,t,i){const o=e.getService("ISettingsService"),a=await o.getEntriesAsync("CFDReport/"+i,0,s.teamScopeName,t);return{rollingDuration:a[s.daysKey],boardLane:a[s.boardLaneKey],boardColumnIds:a[s.boardColumnsKey]}}}function i(){return"CFDReport"}t.CfdReportUserSettings.CFDReportUserSettings=s,s.daysKey="Days",s.boardLaneKey="BoardLane",s.boardColumnsKey="BoardColumnIds",s.teamScopeName="team",t.CfdReportUserSettings.getCFDReportSettingsStorageKey=i}(),function(e){T=t.CfdReportTeachingBubbleHelper={},t.CfdReportTeachingBubbleHelper.getTeachingBubblesData=function(){return{reportKey:(0,L.getCFDReportSettingsStorageKey)(),tourBubble:{title:x.TourBubbleTitle,text:x.TourBubbleText},filterBubble:{title:x.FilterBubbleTitle,text:x.FilterBubbleText},chartBubble:{title:x.ChartBubbleTitle,text:x.ChartBubbleText},legendBubble:{title:x.LegendBubbleTitle,text:x.LegendBubbleText},reportDocumentationUrl:"https://go.microsoft.com/fwlink/?linkid=2095909"}}}(),function(e){v=t.PickersBoardsQuery={},t.PickersBoardsQuery.getBoard=async function(e,t,o,a){const n=e.getService("IDashboardsCacheableQueryService"),r=new s.BoardsQuery(i.reportCommand,t,o),l=await n.getCacheableQueryResult(r),d=l.findIndex(e=>e.BoardCategoryReferenceName===a);return d>=0?l[d]:void 0}}(),function(e){F=t.PickersColumnPicker={};class s extends n.VssComponent{constructor(e){super(e),this.onSelectionChange=(()=>{const e=this.selection.value,t=new Set;for(let s=0;s<e.length;s++)for(let i=e[s].beginIndex;i<=e[s].endIndex;i++)t.add(this.props.items[i]);this.props.onSelect(Array.from(t))}),this.selection=new l.DropdownMultiSelection}componentDidMount(){this.applySelection(this.props),this.selection.subscribe(this.onSelectionChange)}componentWillReceiveProps(e){JSON.stringify(e)!=JSON.stringify(this.props)&&(this.selection.unsubscribe(this.onSelectionChange),this.applySelection(e),this.selection.subscribe(this.onSelectionChange))}componentWillUnmount(){this.selection.unsubscribe(this.onSelectionChange)}render(){return a.createElement("div",{className:"flex-row"},a.createElement(r.Dropdown,{className:"board-column-picker",items:this.props.items,selection:this.selection}))}applySelection(e){void 0!==e.selectedIds&&(this.selection.clear(),e.selectedIds.forEach(t=>{const s=e.items.findIndex(e=>e.id===t);s>=0&&this.selection.select(s,1,!0)}))}}t.PickersColumnPicker.ColumnPicker=s,t.PickersColumnPicker.getColumns=async function(e,t,s,a){const n=e.getService("IDashboardsCacheableQueryService"),r=new o.BoardColumnsQuery(i.reportCommand,t,s),{boardColumns:l}=await n.getCacheableQueryResult(r);return function(e){const t=[],s=[];for(const i of e)i.IsDeleted?s.push(i):t.push(i);s.sort((e,t)=>{const s=new Date(e.RevisedDate),i=new Date(t.RevisedDate);return i.getTime()-s.getTime()}),t.sort((e,t)=>t.ColumnOrder-e.ColumnOrder);const i=t.slice();return i.splice(1,0,...s),i}(l).filter(e=>new Date(e.RevisedDate)>a).map(e=>({id:e.ColumnId,text:e.IsDeleted?(0,d.format)(x.DeletedBoardColumnName,e.ColumnName):e.ColumnName,data:e}))},n.VssComponent.register("BoardsColumnPicker",s)}(),function(e){function s(e){return{id:e.toString(),text:(0,d.format)(x.LastNDays,e),data:e}}k=t[e]={},t[e].customRollingPeriodId="customrollingperiod",t[e].getDaysItems=function(){return[s(14),s(30),s(60),s(180),{id:"separator",type:3},{id:t[e].customRollingPeriodId,text:x.CustomRollingPeriod}]},t[e].getDaysItem=function(s,i){const o=s.findIndex(e=>e.data===i);return o<0?t[e].customRollingPeriodId:s[o].id}}("PickersDaysPickerOptions"),function(e){function s(e){return e[e.findIndex(e=>void 0!==e.data&&e.data.IsDefaultLane)]}function o(e,t){return e.data.IsDefaultLane?-1:t.data.IsDefaultLane?1:e.data.LaneOrder-t.data.LaneOrder}N=t.PickersSwimlanePickerOptions={},t.PickersSwimlanePickerOptions.getSwimlanes=async function(e,t,s){const a=e.getService("IDashboardsCacheableQueryService"),n=new c.BoardSwimlaneQuery(i.reportCommand,t,s);let r=(await a.getCacheableQueryResult(n)).map(e=>{const t=e.IsDefaultLane&&"(Default Lane)"!==e.LaneName?(0,d.format)(x.DefaultBoardLaneName,e.LaneName):e.LaneName;return{id:e.LaneId,text:t,data:e}});return(r=r.sort(o)).unshift({id:"All",text:x.AllBoardLanesName,data:{IsDefaultLane:!1,LaneId:null,LaneName:null,LaneOrder:0}}),r},t.PickersSwimlanePickerOptions.lookupLane=function(e,t){let i=e[e.findIndex(e=>void 0!==e.data&&e.data.LaneName===t)];return null==i&&(i=s(e)),i},t.PickersSwimlanePickerOptions.lookupDefaultLane=s}(),function(e){O=t.CfdReport={};class s extends u.BoardsReport{constructor(e,t){super(e,t),this.textFieldValue=new R.ObservableValue(""),this.resetSettings=(async()=>{await L.CFDReportUserSettings.reset(this.context.pageContext,this.props.teamId,this.props.categoryReferenceName),this.initializeReportState()}),this.onDaysSelect=(e=>{const t=e.id===k.customRollingPeriodId;if(t)this.textFieldValue.value=this.state.widgetSettings.chartDataSettings.timePeriod.settings.toString(),this.setState({customRollingPeriodValidationMessage:null});else{const t=Object.assign({},this.state.widgetSettings);t.chartDataSettings.timePeriod.settings=e.data,this.setUserSelection(t)}this.setState({isCustomRollingPeriod:t})}),this.onLaneSelect=(e=>{const t=Object.assign({},this.state.widgetSettings),s=this.generateVisibleColumns(e,this.state.columnOptions),i=this.generateDesiredColumnIds(t.chartDataSettings.desiredBoardColumnIds,s,this.state.columnOptions);t.chartDataSettings.boardLane=e.data.LaneName,t.chartDataSettings.desiredBoardColumnIds=i,this.setState({visibleColumnOptions:s}),this.setUserSelection(t)}),this.onColumnsSelect=(e=>{const t=Object.assign({},this.state.widgetSettings);t.chartDataSettings.desiredBoardColumnIds=e.map(e=>e.data.ColumnId),this.setUserSelection(t)}),this.onCustomRollingPeriodChanged=((e,t)=>{const s=t.replace(/\D/,"");this.textFieldValue.value=s,this.validateAndSaveCustomRollingPeriodInput(s)}),this.toggleTeachingBubble=(()=>{this.setState({showTeachingBubble:!this.state.showTeachingBubble})}),this.onBubbleDismiss=(()=>{this.setState({showTeachingBubble:!1})}),this.state=this.getDefaultState()}getWidgetContributionId(){return"ms.vss-dashboards-web.Microsoft.VisualStudioOnline.Dashboards.CumulativeFlowDiagramWidget"}getReportTelemetryName(){return"CFDReport"}getReportTitle(){return x.ReportTitle}renderTeachingBubble(){return a.createElement(a.Fragment,null," ",this.reportGuidedTourUtility.render(this.state.showTeachingBubble)," ")}getWidgetName(){const e=(0,N.lookupLane)(this.state.swimlaneOptions,this.state.widgetSettings.chartDataSettings.boardLane),t=null!=e.data&&null!=e.data.LaneId,s=this.props.teamName;return t?(0,d.format)(x.WidgetTitleWithSwimlaneFormat,s,this.props.categoryName,e.data.LaneName):(0,d.format)(x.WidgetTitleWithoutSwimlaneFormat,s,this.props.categoryName)}initializeOnRender(){this.reportGuidedTourUtility=new g.ReportGuidedTourUtility(this.context.pageContext,(0,T.getTeachingBubblesData)(),this.onBubbleDismiss)}getTitleBlock(){const e=this.isReady()&&!this.isInAbnormalState()&&this.isConfigurationValid();return a.createElement(a.Fragment,null,super.getTitleBlock((0,g.getInfoIcon)(this.reportGuidedTourUtility.titleBubbleCallback,this.toggleTeachingBubble,e,this.getReportTitle())))}decorateWidgetContent(e){return a.createElement("div",{ref:this.reportGuidedTourUtility.chartBubbleCallback},e)}getFilterItems(){const e=this.state.widgetSettings.chartDataSettings,t=(0,k.getDaysItem)(this.state.daysOptions,e.timePeriod.settings),s=(0,N.lookupLane)(this.state.swimlaneOptions,this.state.widgetSettings.chartDataSettings.boardLane);return a.createElement(a.Fragment,null,a.createElement(y.FormItem,{label:x.RollingPeriodLabel},a.createElement(w.GenericSelectionDropdown,{className:"days-picker",selectedId:this.state.isCustomRollingPeriod?k.customRollingPeriodId:t,items:this.state.daysOptions,onSelect:this.onDaysSelect})),this.state.isCustomRollingPeriod&&a.createElement(y.FormItem,{label:x.CustomRollingPeriodLabel,className:"custom-rolling-period-form-item",message:this.state.customRollingPeriodValidationMessage,error:null!==this.state.customRollingPeriodValidationMessage},a.createElement(B.TextField,{ariaLabel:x.CustomRollingPeriod,value:this.textFieldValue,onChange:this.onCustomRollingPeriodChanged,width:"auto",className:"custom-rolling-period-text-field",inputClassName:"custom-rolling-period-text-field-input"})),a.createElement(y.FormItem,{label:x.SwimlaneLabel},a.createElement(w.GenericSelectionDropdown,{className:"swimlane-picker",selectedId:s.id,items:this.state.swimlaneOptions,onSelect:this.onLaneSelect})),a.createElement("div",{ref:this.reportGuidedTourUtility.filterBubbleCallback},a.createElement(y.FormItem,{label:x.ColumnOptionsLabel},a.createElement(F.ColumnPicker,{items:this.state.visibleColumnOptions,onSelect:this.onColumnsSelect,selectedIds:e.desiredBoardColumnIds}))),a.createElement(C.ResetElement,{onClick:this.resetSettings,isEnabled:this.state.hasCustomUserSettings}))}getKnownWarningComponent(){return this.state.knownWarning===b.UnmaterializedBoardDetail?a.createElement(S.UnmaterializedBoardMessage,null):null}componentDidMount(){(0,h.resetQueryCache)(this.context.pageContext),this.initializeReportState()}componentDidUpdate(e){JSON.stringify(this.props)!==JSON.stringify(e)&&(this.props.lastRefresh!==e.lastRefresh&&(0,h.resetQueryCache)(this.context.pageContext),this.setState(this.getDefaultState()),this.initializeReportState())}async initializeReportState(){this.cancelDataPromises();try{const e=await L.CFDReportUserSettings.load(this.context.pageContext,this.props.teamId,this.props.categoryReferenceName),t=await(0,g.hasUserSeenBubble)(this.context.pageContext,(0,L.getCFDReportSettingsStorageKey)());this.boardCanceleablePromise=this.trackPromise((0,v.getBoard)(this.context.pageContext,this.props.projectId,this.props.teamId,this.props.categoryReferenceName));const i=await this.boardCanceleablePromise.promise;if(null==i||null==i.BoardId){const e=b.UnmaterializedBoardDetail;return this.setState({knownWarning:e}),void(0,p.publishEmptyReportTelemetry)(this.context.pageContext,this.getReportTelemetryName(),e)}const o=e.rollingDuration?e.rollingDuration:s.defaultRollingDuration;this.swimlanesCanceleablePromise=this.trackPromise((0,N.getSwimlanes)(this.context.pageContext,this.props.projectId,i.BoardId));const a=(0,P.addDays)(new Date,-o);this.columnsCanceleablePromise=this.trackPromise((0,F.getColumns)(this.context.pageContext,this.props.projectId,i.BoardId,a));const[n,r]=await Promise.all([this.swimlanesCanceleablePromise.promise,this.columnsCanceleablePromise.promise]),l=e.boardLane?e.boardLane:null,d=(0,N.lookupLane)(n,l),c=this.generateVisibleColumns(d,r),u=this.generateDesiredColumnIds(e.boardColumnIds,c,r),m=this.assembleSettings(i,d.data,o,u),h=(0,k.getDaysItems)(),C=this.isCustomRollingPeriod(h,o);this.setState({daysOptions:h,swimlaneOptions:n,columnOptions:r,visibleColumnOptions:c,widgetSettings:m,isCustomRollingPeriod:C,showTeachingBubble:!t,hasCustomUserSettings:"{}"!==JSON.stringify(e)}),C&&(this.textFieldValue.value=this.state.widgetSettings.chartDataSettings.timePeriod.settings.toString()),(0,p.publishReportTelemetry)(this.context.pageContext,this.getReportTelemetryName(),{rollingPeriod:m.chartDataSettings.timePeriod.settings,boardLane:m.chartDataSettings.boardLane,columnCount:m.chartDataSettings.desiredBoardColumnIds&&m.chartDataSettings.desiredBoardColumnIds.length})}catch(e){if(e.isCanceled)return;this.handleCommonInitError(e)}finally{this.props.onLoadCompleted&&this.props.onLoadCompleted()}}getDefaultState(){return Object.assign({board:void 0,daysOptions:[],swimlaneOptions:[],columnOptions:[],visibleColumnOptions:[],customRollingPeriodValidationMessage:null},super.getDefaultState())}isConfigurationValid(){return null===this.state.customRollingPeriodValidationMessage}getBackButtonProps(){return{onClick:()=>{const e=(0,m.getBoardsReportUrl)(this.context.pageContext,this.props.categoryName);(0,f.FastPageSwitch)(this.context.pageContext,e,!0)}}}cancelDataPromises(){this.boardCanceleablePromise&&this.boardCanceleablePromise.cancel(),this.swimlanesCanceleablePromise&&this.swimlanesCanceleablePromise.cancel(),this.columnsCanceleablePromise&&this.columnsCanceleablePromise.cancel()}generateVisibleColumns(e,t){const s=[...t];return null!=e.data&&(e.data.IsDefaultLane||null==e.data.LaneId)||s.pop(),s}generateDesiredColumnIds(e,t,s){let i;return void 0!==e?i=e:(i=t.map(e=>e.id),s.length===t.length&&i.pop()),i}validateAndSaveCustomRollingPeriodInput(e){const t=Number(e);if(""!==e&&t>=14&&t<=180){this.setState({customRollingPeriodValidationMessage:null});const e=Object.assign({},this.state.widgetSettings);e.chartDataSettings.timePeriod.settings=t,this.setUserSelection(e)}else this.setState({customRollingPeriodValidationMessage:(0,d.format)(b.ValueMustBeWithinRange,14,180)})}isCustomRollingPeriod(e,t){return!e.some(e=>null!=e.data&&e.data===t)}assembleSettings(e,t,s,i){return{chartDataSettings:{board:e.BoardId,boardLane:t.LaneName,includeFirstBoardColumn:!1,desiredBoardColumnIds:i,project:this.props.projectId,team:this.props.teamId,timePeriod:{identifier:"RollingPeriod",settings:s}},themeName:"Blue"}}setUserSelection(e){L.CFDReportUserSettings.save(this.context.pageContext,e,this.props.teamId,this.props.categoryReferenceName),this.setState({widgetSettings:e,hasCustomUserSettings:!0})}}t.CfdReport.CFDReport=s,s.defaultRollingDuration=30,n.VssComponent.register("CFDReport",s),n.VssComponent.register("CFDReportPreloader",D.NoOpComponent)}(),function(e){t.CfdReportPage={};class s extends n.VssComponent{async componentDidMount(){this.setState(await(0,I.getReportPageState)(this.context.pageContext))}render(){return null==this.state?null:a.createElement(O.CFDReport,{categoryReferenceName:this.state.categoryReferenceName,categoryName:this.state.categoryName,teamId:this.state.teamId,teamName:this.state.teamName,projectId:this.state.projectId})}}t.CfdReportPage.CFDReportPage=s,n.VssComponent.register("CFDReportPage",s)}()},["Resources","CfdReportUserSettings","CfdReportTeachingBubbleHelper","Pickers/BoardsQuery","Pickers/ColumnPicker","Pickers/DaysPickerOptions","Pickers/SwimlanePickerOptions","CfdReport","CfdReportPage"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-reporting-web.cfd-report-content"}}));